# OpenTelemetry Collector Configuration
# Step 19: Observability Infrastructure

# Receivers: How the collector ingests telemetry
receivers:
  # OTLP over gRPC (default for SDKs)
  otlp/grpc:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317

  # OTLP over HTTP (alternative)
  otlp/http:
    protocols:
      http:
        endpoint: 0.0.0.0:4318
        cors:
          allowed_origins:
            - "http://localhost:*"
            - "https://*.frigate.ai"

  # Prometheus scraper (for pulling metrics from services)
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 30s
          static_configs:
            - targets: ['localhost:8888']  # Collector's own metrics

# Processors: Transform, filter, or aggregate telemetry
processors:
  # Batch processor: Batches telemetry data before exporting
  batch:
    timeout: 10s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Memory limiter: Prevents out-of-memory crashes
  memory_limiter:
    check_interval: 1s
    limit_mib: 512
    spike_limit_mib: 128

  # Resource detection: Add resource attributes (cloud provider, k8s, etc.)
  resourcedetection:
    detectors: [env, system, docker]
    timeout: 5s

  # Attributes processor: Add custom attributes
  attributes:
    actions:
      - key: deployment.environment
        value: ${env:ENVIRONMENT}
        action: upsert

# Exporters: Where telemetry data is sent
exporters:
  # Prometheus exporter: Exposes metrics for Prometheus to scrape
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: "otel"
    const_labels:
      environment: ${env:ENVIRONMENT}

  # OTLP exporters for Tempo/Jaeger (traces)
  otlp/tempo:
    endpoint: ${env:TEMPO_ENDPOINT}
    tls:
      insecure: true  # Set to false in production with proper TLS
    compression: gzip

  # Loki exporter for logs
  loki:
    endpoint: ${env:LOKI_ENDPOINT}
    tls:
      insecure: true  # Set to false in production
    labels:
      attributes:
        service.name: "service"
        deployment.environment: "environment"

  # Logging exporter: Debug output to collector logs
  logging:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 200

  # File exporter: Write to local files (optional, for debugging)
  file/traces:
    path: /tmp/otel-traces.jsonl
  file/metrics:
    path: /tmp/otel-metrics.jsonl

# Extensions: Additional capabilities
extensions:
  # Health check endpoint
  health_check:
    endpoint: 0.0.0.0:13133

  # Performance profiler
  pprof:
    endpoint: 0.0.0.0:1777

  # zPages for debugging
  zpages:
    endpoint: 0.0.0.0:55679

# Service: Pipeline configuration
service:
  extensions: [health_check, pprof, zpages]

  pipelines:
    # Traces pipeline
    traces:
      receivers: [otlp/grpc, otlp/http]
      processors: [memory_limiter, resourcedetection, attributes, batch]
      exporters: [otlp/tempo, logging]

    # Metrics pipeline
    metrics:
      receivers: [otlp/grpc, otlp/http, prometheus]
      processors: [memory_limiter, resourcedetection, attributes, batch]
      exporters: [prometheus, logging]

    # Logs pipeline (if structured logs are sent via OTLP)
    logs:
      receivers: [otlp/grpc, otlp/http]
      processors: [memory_limiter, resourcedetection, attributes, batch]
      exporters: [loki, logging]

  # Telemetry configuration (collector's own metrics)
  telemetry:
    logs:
      level: info
    metrics:
      address: 0.0.0.0:8888
      level: detailed
