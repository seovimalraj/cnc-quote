{
  "summary": {
    "generatedAt": "2025-10-14T12:26:54.256Z",
    "totals": {
      "filesScanned": 1032,
      "filesWithRefs": 89,
      "refs": 222,
      "adminSurfaceRefs": 3
    },
    "exportHandlers": [
      "apps/api/src/modules/admin-settings/admin-settings.service.ts"
    ]
  },
  "results": [
    {
      "file": "apps/api/src/modules/admin-alerts/admin-alerts.service.ts",
      "byName": false,
      "hits": [
        {
          "line": 425,
          "match": "// For now, return a mock value"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/modules/admin-health/admin-health.service.ts",
      "byName": false,
      "hits": [
        {
          "line": 73,
          "match": "// For now, return a mock health status since we don't have HTTP client set up"
        },
        {
          "line": 101,
          "match": "// Get queue stats (mock for now)"
        },
        {
          "line": 166,
          "match": "// Check Stripe connectivity (mock for now)"
        },
        {
          "line": 194,
          "match": "// Check PayPal connectivity (mock for now)"
        },
        {
          "line": 394,
          "match": "// For now, return mock data"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/modules/admin-settings/admin-settings.service.ts",
      "byName": false,
      "hits": [
        {
          "line": 118,
          "match": "return this.convertToCSV(events);"
        },
        {
          "line": 124,
          "match": "private convertToCSV(events: AuditLogEvent[]): string {"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/modules/admin-system/admin-system.service.ts",
      "byName": false,
      "hits": [
        {
          "line": 121,
          "match": "// For now, return mock data"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/modules/admin/admin.service.ts",
      "byName": false,
      "hits": [
        {
          "line": 51,
          "match": "// Mock review summary - in real implementation, this would query the manual review service"
        },
        {
          "line": 79,
          "match": "// Mock database metrics - in real implementation, this would query actual DB metrics"
        },
        {
          "line": 93,
          "match": "// Mock webhook status - in real implementation, this would query webhook logs"
        },
        {
          "line": 111,
          "match": "// Mock webhook replay - in real implementation, this would trigger webhook replays"
        },
        {
          "line": 120,
          "match": "// Mock SLO metrics - in real implementation, this would calculate from actual metrics"
        },
        {
          "line": 130,
          "match": "// Mock error data - in real implementation, this would query Sentry/error logs"
        },
        {
          "line": 148,
          "match": "// Mock issue creation - in real implementation, this would create a ticket/issue"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/modules/ai/advanced-dfm.service.ts",
      "byName": false,
      "hits": [
        {
          "line": 886,
          "match": "// Fixture complexity"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/modules/catalog/catalog.service.ts",
      "byName": false,
      "hits": [
        {
          "line": 157,
          "match": "// Mock data for instant quote - in production, fetch from materials table"
        },
        {
          "line": 221,
          "match": "// Mock data for instant quote"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/modules/dfm/dfm.service.spec.ts",
      "byName": false,
      "hits": [
        {
          "line": 90,
          "match": "// Mock the private _client property"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/modules/files/files.service.ts",
      "byName": false,
      "hits": [
        {
          "line": 233,
          "match": "// For now, return mock response"
        },
        {
          "line": 353,
          "match": "const isClean = true; // Mock result"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/modules/geometry/geometry.service.ts",
      "byName": false,
      "hits": [
        {
          "line": 194,
          "match": "// metrics.volume is cm^3, surface_area is cm^2 in current mock analyzer"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/modules/leads/leads.service.spec.ts",
      "byName": false,
      "hits": [
        {
          "line": 15,
          "match": "// Custom queued response mock to emulate Supabase query builder + await semantics"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/modules/payments/payments.service.ts",
      "byName": false,
      "hits": [
        {
          "line": 255,
          "match": "// Analytics event stub (assuming analytics_events table exists)"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/modules/pricing/pricing-engine-v2.service.spec.ts",
      "byName": false,
      "hits": [
        {
          "line": 208,
          "match": "name: 'Stub Material',"
        },
        {
          "line": 229,
          "match": "const regionArg = getMaterialSpy.mock.calls[0]?.[1];"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/modules/pricing/pricing-engine-v2.service.ts",
      "byName": false,
      "hits": [
        {
          "line": 1893,
          "match": "// Mock data for now"
        },
        {
          "line": 1904,
          "match": "// Mock machine rates per minute"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/modules/pricing/pricing.gateway.spec.ts",
      "byName": false,
      "hits": [
        {
          "line": 12,
          "match": "// Mock the pricing engine service BEFORE importing it in Nest context"
        },
        {
          "line": 13,
          "match": "jest.mock('./pricing-engine-v2.service', () => ({"
        },
        {
          "line": 28,
          "match": "jest.mock('./pricing-persistence.service', () => ({"
        },
        {
          "line": 96,
          "match": "// Mock chain for quote_items"
        },
        {
          "line": 97,
          "match": "// we need a distinct mock for .from('quote_items') vs others"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/modules/queue-monitor/queue-monitor.service.ts",
      "byName": false,
      "hits": [
        {
          "line": 179,
          "match": "// Mock database metrics - in real implementation, this would query actual DB metrics"
        },
        {
          "line": 193,
          "match": "// Mock webhook status - in real implementation, this would query webhook logs"
        },
        {
          "line": 211,
          "match": "// Mock webhook replay - in real implementation, this would trigger webhook replays"
        },
        {
          "line": 220,
          "match": "// Mock SLO metrics - in real implementation, this would calculate from actual metrics"
        },
        {
          "line": 230,
          "match": "// Mock error data - in real implementation, this would query Sentry/error logs"
        },
        {
          "line": 248,
          "match": "// Mock review summary - in real implementation, this would query review queue"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/modules/quotes/quote-preview.e2e.spec.ts",
      "byName": false,
      "hits": [
        {
          "line": 3,
          "match": "jest.mock('../../auth/rbac.middleware', () => ({"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/modules/quotes/quote-revisions.service.ts",
      "byName": false,
      "hits": [
        {
          "line": 80,
          "match": "// For now we return a minimal stub as we do not re-materialize a mutated quote yet."
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/modules/quotes/quotes.service.spec.ts",
      "byName": false,
      "hits": [
        {
          "line": 3,
          "match": "jest.mock('resend', () => ({"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/pricing/__tests__/orchestrator.spec.ts",
      "byName": false,
      "hits": [
        {
          "line": 415,
          "match": "code: 'stub',"
        },
        {
          "line": 416,
          "match": "label: 'Stubbed result',"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/pricing/bomService.ts",
      "byName": false,
      "hits": [
        {
          "line": 267,
          "match": "// Workholding fixtures"
        },
        {
          "line": 271,
          "match": "id: `tooling-${part.external_id || 'unknown'}-fixtures`,"
        },
        {
          "line": 273,
          "match": "name: 'Workholding Fixtures',"
        },
        {
          "line": 274,
          "match": "description: 'Custom or standard fixtures for part holding',"
        },
        {
          "line": 562,
          "match": "// Fixture cost based on complexity"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/pricing/factors/setup/setup-time.ts",
      "byName": false,
      "hits": [
        {
          "line": 28,
          "match": "const fixtures = featureData.fixtures?.count ?? 0;"
        },
        {
          "line": 29,
          "match": "return base + Math.min(45, holes * 0.8 + fixtures * 2);"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/pricing/featureExtraction.ts",
      "byName": false,
      "hits": [
        {
          "line": 71,
          "match": "confidence_score: 0.85, // Mock confidence score"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/queues/jobs/dfm-analysis.processor.ts",
      "byName": false,
      "hits": [
        {
          "line": 90,
          "match": "// For now, return mock data"
        },
        {
          "line": 91,
          "match": "this.logger.debug('Parsing CAD file (mock implementation)');"
        },
        {
          "line": 114,
          "match": "this.logger.debug('Extracting features (mock implementation)');"
        },
        {
          "line": 128,
          "match": "this.logger.debug('Running DFM checks (mock implementation)');"
        },
        {
          "line": 287,
          "match": "this.logger.debug('Generating viewer mesh (mock implementation)');"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/tax/adapters/adapter.interface.ts",
      "byName": false,
      "hits": [
        {
          "line": 59,
          "match": "* Provider name (e.g., 'taxjar', 'avalara', 'stub')"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/tax/adapters/avalara.stub.ts",
      "byName": true,
      "hits": [
        {
          "line": 2,
          "match": "* Step 20: Avalara Stub Adapter"
        },
        {
          "line": 3,
          "match": "* Deterministic stub for EU VAT and other global taxes"
        },
        {
          "line": 15,
          "match": "* EU VAT standard rates (stub data)"
        },
        {
          "line": 49,
          "match": "* India GST rates (stub data)"
        },
        {
          "line": 55,
          "match": "* Avalara stub adapter (EU VAT + India GST + other regions)"
        },
        {
          "line": 58,
          "match": "readonly name = 'avalara-stub';"
        },
        {
          "line": 77,
          "match": "// US handled by TaxJar stub"
        },
        {
          "line": 84,
          "match": "// Default: no tax for other countries (stub)"
        },
        {
          "line": 249,
          "match": "note: 'Country not supported - no tax applied (stub)',"
        },
        {
          "line": 262,
          "match": "* Validate VAT number (stub)"
        },
        {
          "line": 265,
          "match": "// Stub validation: Check format only"
        },
        {
          "line": 273,
          "match": "companyName: valid ? 'Test Company (Stub)' : undefined,"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/tax/adapters/taxjar.stub.ts",
      "byName": true,
      "hits": [
        {
          "line": 2,
          "match": "* Step 20: TaxJar Stub Adapter"
        },
        {
          "line": 3,
          "match": "* Deterministic stub for development and testing"
        },
        {
          "line": 15,
          "match": "* US State sales tax rates (stub data)"
        },
        {
          "line": 72,
          "match": "* TaxJar stub adapter"
        },
        {
          "line": 75,
          "match": "readonly name = 'taxjar-stub';"
        },
        {
          "line": 87,
          "match": "// Only support US for TaxJar stub"
        },
        {
          "line": 92,
          "match": "`Country ${input.shipTo.country} not supported by TaxJar stub`,"
        },
        {
          "line": 140,
          "match": "note: 'This is a stub calculation for development only',"
        },
        {
          "line": 147,
          "match": "// Stub validation - just check required fields"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/src/tax/tax.service.ts",
      "byName": false,
      "hits": [
        {
          "line": 14,
          "match": "import { TaxJarStubAdapter } from './adapters/taxjar.stub';"
        },
        {
          "line": 15,
          "match": "import { AvalaraStubAdapter } from './adapters/avalara.stub';"
        },
        {
          "line": 142,
          "match": "const provider = process.env.TAX_PROVIDER || 'stub';"
        },
        {
          "line": 146,
          "match": "return this.adapters.get('taxjar-stub');"
        },
        {
          "line": 148,
          "match": "return this.adapters.get('avalara-stub');"
        },
        {
          "line": 196,
          "match": "const adapter = this.adapters.get('avalara-stub');"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/test/tax.service.spec.ts",
      "byName": false,
      "hits": [
        {
          "line": 8,
          "match": "import { TaxJarStubAdapter } from '../../../src/tax/adapters/taxjar.stub';"
        },
        {
          "line": 9,
          "match": "import { AvalaraStubAdapter } from '../../../src/tax/adapters/avalara.stub';"
        },
        {
          "line": 48,
          "match": "expect(result.provider).toBe('taxjar-stub');"
        },
        {
          "line": 137,
          "match": "expect(result.provider).toBe('avalara-stub');"
        },
        {
          "line": 207,
          "match": "expect(result.provider).toBe('avalara-stub');"
        },
        {
          "line": 233,
          "match": "expect(result.provider).toBe('avalara-stub');"
        },
        {
          "line": 298,
          "match": "expect(result.provider).toBe('avalara-stub');"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/test/unit/orders.service.spec.ts",
      "byName": false,
      "hits": [
        {
          "line": 7,
          "match": "// Create minimal mocks"
        },
        {
          "line": 53,
          "match": "// Current order stub"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/api/test/unit/policies.spec.ts",
      "byName": false,
      "hits": [
        {
          "line": 15,
          "match": "let supabase: jest.Mocked<SupabaseService>;"
        },
        {
          "line": 16,
          "match": "let audit: jest.Mocked<AuditService>;"
        },
        {
          "line": 17,
          "match": "let reflector: jest.Mocked<Reflector>;"
        },
        {
          "line": 20,
          "match": "// Mock Supabase service"
        },
        {
          "line": 30,
          "match": "// Mock Audit service"
        },
        {
          "line": 35,
          "match": "// Mock Reflector"
        },
        {
          "line": 48,
          "match": "// Helper to create mock execution context"
        },
        {
          "line": 73,
          "match": "// Mock role_id lookup"
        },
        {
          "line": 80,
          "match": "// Mock policy check"
        },
        {
          "line": 102,
          "match": "// Mock role_id lookup"
        },
        {
          "line": 109,
          "match": "// Mock policy check - no matching policy"
        },
        {
          "line": 136,
          "match": "// Mock role_id lookup"
        },
        {
          "line": 143,
          "match": "// Mock policy check - org_admin has '*' action on quotes"
        },
        {
          "line": 201,
          "match": "// Mock role_id lookup (should be called twice - once per context)"
        },
        {
          "line": 208,
          "match": "// Mock policy check (should only be called once - second call uses cache)"
        },
        {
          "line": 236,
          "match": "// Mock role_id lookup"
        },
        {
          "line": 243,
          "match": "// Mock policy check"
        },
        {
          "line": 273,
          "match": "// Mock role_id lookup"
        },
        {
          "line": 280,
          "match": "// Mock policy check - org_admin has '*' action on quotes"
        },
        {
          "line": 341,
          "match": "// Mock role_id lookup failure"
        },
        {
          "line": 363,
          "match": "// Mock role_id lookup"
        },
        {
          "line": 370,
          "match": "// Mock policy checks - both should succeed for reviewer"
        },
        {
          "line": 398,
          "match": "// Mock role_id lookup"
        },
        {
          "line": 405,
          "match": "// Mock policy checks - first succeeds, second fails"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/__tests__/pricing/optimistic.test.ts",
      "byName": false,
      "hits": [
        {
          "line": 18,
          "match": "// Helper to create mock request"
        },
        {
          "line": 31,
          "match": "// Helper to create mock response"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/(auth)/invite/page.tsx",
      "byName": false,
      "hits": [
        {
          "line": 23,
          "match": "// For now, we'll return mock data"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/admin/metrics/page.tsx",
      "byName": false,
      "hits": [
        {
          "line": 54,
          "match": "<CardHeader><CardTitle className=\"text-sm\">Database Latency (Mock)</CardTitle></CardHeader>"
        }
      ],
      "isAdminSurface": true
    },
    {
      "file": "apps/web/app/admin/pricing/page.tsx",
      "byName": false,
      "hits": [
        {
          "line": 118,
          "match": "// Use mock data if API doesn't exist yet"
        }
      ],
      "isAdminSurface": true
    },
    {
      "file": "apps/web/app/admin/workcenter/page.tsx",
      "byName": false,
      "hits": [
        {
          "line": 36,
          "match": "// Mock data for workcenter"
        },
        {
          "line": 116,
          "match": "// Mock data - in real implementation, this would come from API calls"
        },
        {
          "line": 234,
          "match": "// Mock API calls - in real implementation, these would be actual API calls"
        },
        {
          "line": 243,
          "match": "// Mock retry action"
        },
        {
          "line": 256,
          "match": "// Mock replay action"
        },
        {
          "line": 274,
          "match": "// Mock retry action"
        }
      ],
      "isAdminSurface": true
    },
    {
      "file": "apps/web/app/analytics/page.tsx",
      "byName": false,
      "hits": [
        {
          "line": 25,
          "match": "// Mock analytics data"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/api/admin/abandoned/[id]/timeline/route.ts",
      "byName": false,
      "hits": [
        {
          "line": 13,
          "match": "// Mock timeline data"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/api/admin/abandoned/export/route.ts",
      "byName": false,
      "hits": [
        {
          "line": 18,
          "match": "// Mock data for export"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/api/admin/abandoned/route.ts",
      "byName": false,
      "hits": [
        {
          "line": 18,
          "match": "// Mock data for development"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/api/admin/pricing/config/route.ts",
      "byName": false,
      "hits": [
        {
          "line": 3,
          "match": "// Mock pricing configuration - in production this would come from a database"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/api/admin/quotes/[id]/reprice/route.ts",
      "byName": false,
      "hits": [
        {
          "line": 13,
          "match": "// Mock response - in reality this would return the updated quote"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/api/admin/quotes/[id]/route.ts",
      "byName": false,
      "hits": [
        {
          "line": 64,
          "match": "// Mock data for development"
        },
        {
          "line": 150,
          "match": "// For now, return mock data"
        },
        {
          "line": 182,
          "match": "// For now, just return the mock data with any updates"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/api/cad/analyze/route.ts",
      "byName": false,
      "hits": [
        {
          "line": 38,
          "match": "// Fall back to mock response if CAD service is unavailable"
        },
        {
          "line": 68,
          "match": "// Fall back to mock response"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/api/dfm/mock-upload/[fileId]/route.ts",
      "byName": false,
      "hits": [
        {
          "line": 27,
          "match": "console.log(`Mock file upload successful: ${fileId}, size: ${contentLength}, type: ${contentType}`);"
        },
        {
          "line": 37,
          "match": "console.error('Error in mock upload:', error);"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/api/dfm/options/materials/route.ts",
      "byName": false,
      "hits": [
        {
          "line": 108,
          "match": "console.warn('Falling back to mock DFM material options:', error);"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/api/dfm/options/tolerances/route.ts.backup",
      "byName": false,
      "hits": [
        {
          "line": 5,
          "match": "// For now, return mock data since Supabase client is having connection issues"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/api/dfm/upload-url/route.ts",
      "byName": false,
      "hits": [
        {
          "line": 44,
          "match": "const mockUploadUrl = `https://localhost/api/dfm/mock-upload/${fileId}`;"
        },
        {
          "line": 46,
          "match": "// Return mock upload URL for development"
        },
        {
          "line": 52,
          "match": "message: 'Mock upload URL generated successfully',"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/api/files/mock-upload/[fileId]/route.ts",
      "byName": false,
      "hits": [
        {
          "line": 7,
          "match": "console.log(`Mock file upload received for fileId: ${fileId}`);"
        },
        {
          "line": 35,
          "match": "console.error('Mock upload error:', error);"
        },
        {
          "line": 38,
          "match": "{ error: 'Mock upload failed' },"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/api/files/upload/route.ts",
      "byName": false,
      "hits": [
        {
          "line": 58,
          "match": "// For now, use mock file handling since database is not fully configured"
        },
        {
          "line": 62,
          "match": "// For development/demo, create a mock signed URL that will be handled by the frontend"
        },
        {
          "line": 64,
          "match": "const mockSignedUrl = `https://app.frigate.ai/api/files/mock-upload/${fileId}`;"
        },
        {
          "line": 66,
          "match": "console.log(`Created mock signed URL for ${fileName}: ${mockSignedUrl}`);"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/api/orders/kanban/route.ts",
      "byName": false,
      "hits": [
        {
          "line": 37,
          "match": "// Mock data for Kanban board (in production, this would come from database)"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/api/price/route.ts",
      "byName": false,
      "hits": [
        {
          "line": 80,
          "match": "// Mock pricing configuration (in production, this would come from database)"
        },
        {
          "line": 185,
          "match": "function calculateSetupCost(flips: number, fixtures: number, qty: number): number {"
        },
        {
          "line": 187,
          "match": "const t_setup = machine.min_setup_min + (flips * 15) + (fixtures * 10); // Base + per flip + per fixture"
        },
        {
          "line": 274,
          "match": "const setup_cost = calculateSetupCost(2, 1, specs.quantity); // 2 flips, 1 fixture"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/api/pricing/price/route.ts",
      "byName": false,
      "hits": [
        {
          "line": 8,
          "match": "// Mock pricing calculation"
        },
        {
          "line": 24,
          "match": "// Calculate mock price"
        },
        {
          "line": 73,
          "match": "// Mock response"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/api/quotes/[id]/lead/route.ts",
      "byName": false,
      "hits": [
        {
          "line": 24,
          "match": "// For now, return a mock response"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/api/quotes/[id]/lines/route.ts",
      "byName": false,
      "hits": [
        {
          "line": 15,
          "match": "// Generate mock pricing based on file size and type"
        },
        {
          "line": 21,
          "match": "// Mock processing time based on file size"
        },
        {
          "line": 25,
          "match": "// For now, we'll return a mock quote line object with realistic pricing"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/api/quotes/[id]/route.ts",
      "byName": false,
      "hits": [
        {
          "line": 87,
          "match": "// Mock data for development"
        },
        {
          "line": 243,
          "match": "// Mock file names based on seed"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/customers/page.tsx",
      "byName": false,
      "hits": [
        {
          "line": 51,
          "match": "// Mock customer data"
        },
        {
          "line": 62,
          "match": "// Mock quotes data"
        },
        {
          "line": 111,
          "match": "// Mock orders data"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/dashboard/page.tsx",
      "byName": false,
      "hits": [
        {
          "line": 22,
          "match": "// Mock data for demonstration"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/dfm-analysis/page.tsx",
      "byName": false,
      "hits": [
        {
          "line": 158,
          "match": "// Provide fallback mock data if API fails"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/help/[slug]/page.tsx",
      "byName": false,
      "hits": [
        {
          "line": 30,
          "match": "// Mock data for development"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/help/contact/page.tsx",
      "byName": false,
      "hits": [
        {
          "line": 118,
          "match": "// Mock API call"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/help/HelpClient.tsx",
      "byName": false,
      "hits": [
        {
          "line": 46,
          "match": "// Mock data for development"
        },
        {
          "line": 82,
          "match": "// Mock search results"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/instant-quote/page.tsx",
      "byName": false,
      "hits": [
        {
          "line": 307,
          "match": "console.log('Using mock successful upload response');"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/orders/page.tsx",
      "byName": false,
      "hits": [
        {
          "line": 8,
          "match": "// Mock data for demonstration"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/portal/checkout/[quote_id]/page.tsx",
      "byName": false,
      "hits": [
        {
          "line": 120,
          "match": "// Mock data"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/portal/checkout/[quote_id]/result/success/page.tsx",
      "byName": false,
      "hits": [
        {
          "line": 34,
          "match": "// Mock order data"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/portal/quotes/[id]/attachments/AttachmentsClient.tsx",
      "byName": false,
      "hits": [
        {
          "line": 52,
          "match": "// Mock data"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/portal/quotes/[id]/page.tsx",
      "byName": false,
      "hits": [
        {
          "line": 91,
          "match": "// Mock data based on specification"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/portal/quotes/page.tsx",
      "byName": false,
      "hits": [
        {
          "line": 89,
          "match": "// Mock data for development"
        },
        {
          "line": 90,
          "match": "const mockQuotes: Quote[] = ["
        },
        {
          "line": 169,
          "match": "setQuotes(mockQuotes);"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/quote/[id]/configure/[line_id]/page.tsx",
      "byName": false,
      "hits": [
        {
          "line": 158,
          "match": "// For now, we'll use mock data"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/app/quote/[id]/QuoteClient.tsx",
      "byName": false,
      "hits": [
        {
          "line": 94,
          "match": "// Mock DFM checks for demonstration"
        },
        {
          "line": 428,
          "match": "highlights: { face_ids: [], edge_ids: [] }, // Mock highlights"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/e2e/widget-embed.spec.ts",
      "byName": false,
      "hits": [
        {
          "line": 24,
          "match": "await fileChooser.setFiles('./fixtures/test-part.stl');"
        },
        {
          "line": 68,
          "match": "await fileChooser.setFiles('./fixtures/part-with-issues.stl');"
        },
        {
          "line": 87,
          "match": "await fileChooser.setFiles('./fixtures/test-part.stl');"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/public/embed-test.html",
      "byName": false,
      "hits": [
        {
          "line": 37,
          "match": "mockOrigin: new URL(document.location.search).searchParams.get('mock_origin') || document.location.origin"
        },
        {
          "line": 70,
          "match": "log('INFO', `Using mock origin: ${config.mockOrigin}`);"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/src/app/quote-management/page.tsx",
      "byName": false,
      "hits": [
        {
          "line": 8,
          "match": "// Mock comparison data"
        },
        {
          "line": 9,
          "match": "const MOCK_COMPARISON_OPTIONS = ["
        },
        {
          "line": 185,
          "match": "options={MOCK_COMPARISON_OPTIONS}"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/src/components/admin/AbandonedFilters.tsx",
      "byName": false,
      "hits": [
        {
          "line": 42,
          "match": "const abandonmentRate = 23.5 // Mock data - would be calculated from actual data"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/src/components/admin/AbandonedQuotesTable.tsx",
      "byName": false,
      "hits": [
        {
          "line": 55,
          "match": "await assignQuote(quoteId, 'user-123') // Mock user ID"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/src/components/admin/AbandonedTimelineDrawer.tsx",
      "byName": false,
      "hits": [
        {
          "line": 33,
          "match": "// Mock data for the drawer"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/src/components/checkout/BillingStep.tsx",
      "byName": false,
      "hits": [
        {
          "line": 58,
          "match": "// Mock saved payment methods"
        },
        {
          "line": 83,
          "match": "// Mock organization default address"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/src/components/checkout/PaymentStep.tsx",
      "byName": false,
      "hits": [
        {
          "line": 35,
          "match": "// Mock saved payment methods"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/src/components/checkout/ShippingStep.tsx",
      "byName": false,
      "hits": [
        {
          "line": 64,
          "match": "// Mock shipping rates"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/src/components/dfm/AdvancedDFMAnalysis.tsx",
      "byName": false,
      "hits": [
        {
          "line": 601,
          "match": "<span className=\"text-sm text-muted-foreground\">Fixture Complexity:</span>"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/src/components/instant-quote/EnhancedInstantQuote.tsx",
      "byName": false,
      "hits": [
        {
          "line": 53,
          "match": "// Mock part data"
        },
        {
          "line": 57,
          "match": "meshUrl: '/api/geometry/mock-part/mesh?lod=low',"
        },
        {
          "line": 64,
          "match": "// Mock quick stats"
        },
        {
          "line": 65,
          "match": "const mockStats: QuickStats = {"
        },
        {
          "line": 73,
          "match": "setQuickStats(mockStats);"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/src/components/instant-quote/QuoteHistory.tsx",
      "byName": false,
      "hits": [
        {
          "line": 47,
          "match": "// Mock data for demonstration"
        },
        {
          "line": 48,
          "match": "const MOCK_QUOTES: QuoteHistoryItem[] = ["
        },
        {
          "line": 131,
          "match": "quotes = MOCK_QUOTES,"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/src/components/providers/PayPalProvider.tsx",
      "byName": false,
      "hits": [
        {
          "line": 3,
          "match": "// Temporary mock PayPal provider while we resolve server-side context issues"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/src/components/viewer/CadViewerSection.tsx",
      "byName": false,
      "hits": [
        {
          "line": 58,
          "match": "// For now, using mock data"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/src/lib/auth.ts",
      "byName": false,
      "hits": [
        {
          "line": 34,
          "match": "// Mock user database - in production, this would be a real database query"
        },
        {
          "line": 85,
          "match": "// Mock registration - in production, this would create a new user in the database"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "apps/web/tsconfig.typecheck.tsbuildinfo",
      "byName": false,
      "hits": [
        {
          "line": 1,
          "match": "{\"fileNames\":[\"../../node_modules/.pnpm/typescript@5.9.2/node_modules/typescript/lib/lib.es5.d.ts\",\"../../node_modules/.pnpm/typescript@5.9.2/node_modules/typescript/lib/lib.es2015.d.ts\",\"../../node_modules/.pnpm/typescript@5.9.2/node_modules/typescript/lib/lib.es2016.d.ts\",\"../../node_modules/.pnpm/typescript@5.9.2/node_modules/typescript/lib/lib.es2017.d.ts\",\"../../node_modules/.pnpm/typescript@"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "packages/shared/src/__tests__/quote.vnext.spec.ts",
      "byName": false,
      "hits": [
        {
          "line": 9,
          "match": "const rawFixturePath = join(__dirname, 'fixtures/quote.bundle.raw.json');"
        },
        {
          "line": 10,
          "match": "const expectedFixturePath = join(__dirname, 'fixtures/quote.bundle.vnext.json');"
        }
      ],
      "isAdminSurface": false
    },
    {
      "file": "packages/shared/src/pricing.compute.ts",
      "byName": false,
      "hits": [
        {
          "line": 9,
          "match": "* modeling, nesting, fixture amortization, real material density, and stochastic adjustments."
        }
      ],
      "isAdminSurface": false
    }
  ]
}