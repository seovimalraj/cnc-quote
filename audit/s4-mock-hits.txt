apps/web/app/api/quotes/[id]/lead/route.ts:24:    // For now, return a mock response
apps/web/app/api/quotes/[id]/lines/route.ts:15:    // Generate mock pricing based on file size and type
apps/web/app/api/quotes/[id]/lines/route.ts:25:    // For now, we'll return a mock quote line object with realistic pricing
apps/web/app/api/price/route.ts:187:  const t_setup = machine.min_setup_min + (flips * 15) + (fixtures * 10); // Base + per flip + per fixture
apps/web/app/api/price/route.ts:274:    const setup_cost = calculateSetupCost(2, 1, specs.quantity); // 2 flips, 1 fixture
apps/web/app/api/dfm/mock-upload/[fileId]/route.ts:37:    console.error('Error in mock upload:', error);
apps/web/app/api/dfm/upload-url/route.ts:44:    const mockUploadUrl = `https://localhost/api/dfm/mock-upload/${fileId}`;
apps/web/app/api/dfm/upload-url/route.ts:46:    // Return mock upload URL for development
apps/web/app/api/dfm/options/tolerances/route.ts.backup:5:    // For now, return mock data since Supabase client is having connection issues
apps/web/app/api/dfm/options/materials/route.ts:108:        console.warn('Falling back to mock DFM material options:', error);
apps/web/app/api/cad/analyze/route.ts:38:        // Fall back to mock response if CAD service is unavailable
apps/web/app/api/cad/analyze/route.ts:68:      // Fall back to mock response
apps/web/app/api/pricing/price/route.ts:24:    // Calculate mock price
apps/web/app/api/admin/quotes/[id]/route.ts:150:    // For now, return mock data
apps/web/app/api/admin/quotes/[id]/route.ts:182:    // For now, just return the mock data with any updates
apps/web/app/api/files/upload/route.ts:58:    // For now, use mock file handling since database is not fully configured
apps/web/app/api/files/upload/route.ts:62:    // For development/demo, create a mock signed URL that will be handled by the frontend
apps/web/app/api/files/upload/route.ts:64:    const mockSignedUrl = `https://app.frigate.ai/api/files/mock-upload/${fileId}`;
apps/web/app/api/files/upload/route.ts:66:    console.log(`Created mock signed URL for ${fileName}: ${mockSignedUrl}`);
apps/web/app/(auth)/invite/page.tsx:23:    // For now, we'll return mock data
apps/web/app/instant-quote/page.tsx:307:        console.log('Using mock successful upload response');
apps/web/app/portal/quotes/page.tsx:90:  const mockQuotes: Quote[] = [
apps/web/app/portal/quotes/page.tsx:169:      setQuotes(mockQuotes);
apps/web/app/admin/pricing/page.tsx:118:        // Use mock data if API doesn't exist yet
apps/web/app/docs/_components/quickstart.tsx:138:      "provider": "taxjar-stub",
apps/web/app/quote/[id]/configure/[line_id]/page.tsx:158:      // For now, we'll use mock data
apps/web/app/dfm-analysis/page.tsx:158:      // Provide fallback mock data if API fails
apps/web/src/components/providers/PayPalProvider.tsx:3:// Temporary mock PayPal provider while we resolve server-side context issues
apps/web/src/components/instant-quote/EnhancedInstantQuote.tsx:57:      meshUrl: '/api/geometry/mock-part/mesh?lod=low',
apps/web/src/components/instant-quote/EnhancedInstantQuote.tsx:65:    const mockStats: QuickStats = {
apps/web/src/components/instant-quote/EnhancedInstantQuote.tsx:73:    setQuickStats(mockStats);
apps/web/src/components/viewer/CadViewerSection.tsx:58:      // For now, using mock data
