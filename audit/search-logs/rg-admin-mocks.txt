apps/web/app/orders/page.tsx:8:  // Mock data for demonstration
apps/web/app/api/quotes/[id]/lead/route.ts:24:    // For now, return a mock response
apps/web/app/api/quotes/[id]/lead/route.ts:25:    const mockUpdatedQuote = {
apps/web/app/api/quotes/[id]/lead/route.ts:33:    return NextResponse.json(mockUpdatedQuote)
apps/web/app/api/quotes/[id]/lines/[line_id]/route.ts:19:    const mockUpdatedLine = {
apps/web/app/api/quotes/[id]/lines/[line_id]/route.ts:32:    return NextResponse.json(mockUpdatedLine);
apps/web/app/api/quotes/[id]/lines/route.ts:15:    // Generate mock pricing based on file size and type
apps/web/app/api/quotes/[id]/lines/route.ts:21:    // Mock processing time based on file size
apps/web/app/api/quotes/[id]/lines/route.ts:25:    // For now, we'll return a mock quote line object with realistic pricing
apps/web/app/api/quotes/[id]/route.ts:87:// Mock data for development
apps/web/app/api/quotes/[id]/route.ts:88:const mockQuote: Quote = {
apps/web/app/api/quotes/[id]/route.ts:243:    // Mock file names based on seed
apps/web/app/api/quotes/[id]/route.ts:252:    const mockQuote = {
apps/web/app/api/quotes/[id]/route.ts:316:    return NextResponse.json(mockQuote);
apps/web/app/api/price/route.ts:80:// Mock pricing configuration (in production, this would come from database)
apps/web/app/api/price/route.ts:81:const mockPricingConfig: PricingConfig = {
apps/web/app/api/price/route.ts:174:  const mat = mockPricingConfig.materials[material];
apps/web/app/api/price/route.ts:185:function calculateSetupCost(flips: number, fixtures: number, qty: number): number {
apps/web/app/api/price/route.ts:186:  const machine = mockPricingConfig.machines['3-axis-milling'];
apps/web/app/api/price/route.ts:187:  const t_setup = machine.min_setup_min + (flips * 15) + (fixtures * 10); // Base + per flip + per fixture
apps/web/app/api/price/route.ts:192:  const machine = mockPricingConfig.machines['3-axis-milling'];
apps/web/app/api/price/route.ts:194:  const tolerance_mult = mockPricingConfig.tolerance_packs[tolerance_pack]?.cycle_time_multiplier || 1.0;
apps/web/app/api/price/route.ts:214:  const fin = mockPricingConfig.finishes[finish];
apps/web/app/api/price/route.ts:225:  const insp = mockPricingConfig.inspection;
apps/web/app/api/price/route.ts:234:    const risk = mockPricingConfig.risk_matrix[code];
apps/web/app/api/price/route.ts:248:  const { overhead_percent, target_margin_percent } = mockPricingConfig.overhead_margin;
apps/web/app/api/price/route.ts:254:  const speed_region = mockPricingConfig.speed_region[region]?.[speed];
apps/web/app/api/price/route.ts:274:    const setup_cost = calculateSetupCost(2, 1, specs.quantity); // 2 flips, 1 fixture
apps/web/app/api/price/route.ts:310:        const speed_region = mockPricingConfig.speed_region[region]?.[speed];
apps/web/app/api/price/route.ts:328:      config_version: mockPricingConfig.version,
apps/web/app/api/orders/kanban/route.ts:37:// Mock data for Kanban board (in production, this would come from database)
apps/web/app/api/orders/kanban/route.ts:38:const mockOrders: KanbanOrder[] = [
apps/web/app/api/orders/kanban/route.ts:297:    let filteredOrders = mockOrders
apps/web/app/api/orders/kanban/route.ts:377:    const orderIndex = mockOrders.findIndex(order => order.id === orderId)
apps/web/app/api/orders/kanban/route.ts:385:    const order = mockOrders[orderIndex]
apps/web/app/api/dfm/mock-upload/[fileId]/route.ts:27:    console.log(`Mock file upload successful: ${fileId}, size: ${contentLength}, type: ${contentType}`);
apps/web/app/api/dfm/mock-upload/[fileId]/route.ts:37:    console.error('Error in mock upload:', error);
apps/web/app/api/dfm/upload-url/route.ts:44:    const mockUploadUrl = `https://localhost/api/dfm/mock-upload/${fileId}`;
apps/web/app/api/dfm/upload-url/route.ts:46:    // Return mock upload URL for development
apps/web/app/api/dfm/upload-url/route.ts:50:      uploadUrl: mockUploadUrl,
apps/web/app/api/dfm/upload-url/route.ts:52:      message: 'Mock upload URL generated successfully',
apps/web/app/api/dfm/options/certifications/route.ts:6:    const mockCertifications = [
apps/web/app/api/dfm/options/certifications/route.ts:79:    return NextResponse.json(mockCertifications);
apps/web/app/api/dfm/options/finishes/route.ts:6:    const mockFinishes = [
apps/web/app/api/dfm/options/finishes/route.ts:100:    return NextResponse.json(mockFinishes);
apps/web/app/api/dfm/options/criticality/route.ts:6:    const mockCriticality = [
apps/web/app/api/dfm/options/criticality/route.ts:51:    return NextResponse.json(mockCriticality);
apps/web/app/api/dfm/options/tolerances/route.ts.backup:5:    // For now, return mock data since Supabase client is having connection issues
apps/web/app/api/dfm/options/tolerances/route.ts.backup:6:    const mockTolerances = [
apps/web/app/api/dfm/options/tolerances/route.ts.backup:30:    return NextResponse.json(mockTolerances);
apps/web/app/api/dfm/options/tolerances/route.ts:6:    const mockTolerances = [
apps/web/app/api/dfm/options/tolerances/route.ts:51:    return NextResponse.json(mockTolerances);
apps/web/app/api/dfm/options/industries/route.ts:6:    const mockIndustries = [
apps/web/app/api/dfm/options/industries/route.ts:79:    return NextResponse.json(mockIndustries);
apps/web/app/api/dfm/options/materials/route.ts:108:        console.warn('Falling back to mock DFM material options:', error);
apps/web/app/api/cad/analyze/route.ts:38:        // Fall back to mock response if CAD service is unavailable
apps/web/app/api/cad/analyze/route.ts:68:      // Fall back to mock response
apps/web/app/api/pricing/price/route.ts:8:// Mock pricing calculation
apps/web/app/api/pricing/price/route.ts:24:    // Calculate mock price
apps/web/app/api/pricing/price/route.ts:73:    // Mock response
apps/web/app/api/emails/send/route.ts:26:    const mockEmailResult = {
apps/web/app/api/emails/send/route.ts:34:    return NextResponse.json(mockEmailResult);
apps/web/app/api/admin/quotes/[id]/reprice/route.ts:13:    // Mock response - in reality this would return the updated quote
apps/web/app/api/admin/quotes/[id]/route.ts:64:// Mock data for development
apps/web/app/api/admin/quotes/[id]/route.ts:65:const mockQuote: Quote = {
apps/web/app/api/admin/quotes/[id]/route.ts:123:const mockActivity: ActivityEvent[] = [
apps/web/app/api/admin/quotes/[id]/route.ts:150:    // For now, return mock data
apps/web/app/api/admin/quotes/[id]/route.ts:151:    const quote = mockQuote
apps/web/app/api/admin/quotes/[id]/route.ts:152:    const activity = mockActivity
apps/web/app/api/admin/quotes/[id]/route.ts:182:    // For now, just return the mock data with any updates
apps/web/app/api/admin/quotes/[id]/route.ts:184:      ...mockQuote,
apps/web/app/api/admin/abandoned/export/route.ts:18:// Mock data for export
apps/web/app/api/admin/abandoned/export/route.ts:19:const mockAbandonedQuotes: AbandonedQuote[] = [
apps/web/app/api/admin/abandoned/export/route.ts:70:      ...mockAbandonedQuotes.map(quote => [
apps/web/app/api/admin/abandoned/[id]/timeline/route.ts:13:// Mock timeline data
apps/web/app/api/admin/abandoned/[id]/timeline/route.ts:14:const mockTimeline: ActivityEvent[] = [
apps/web/app/api/admin/abandoned/[id]/timeline/route.ts:104:    const quoteTimeline = mockTimeline.filter(event => event.quote_id === params.id)
apps/web/app/api/admin/abandoned/route.ts:18:// Mock data for development
apps/web/app/api/admin/abandoned/route.ts:19:const mockAbandonedQuotes: AbandonedQuote[] = [
apps/web/app/api/admin/abandoned/route.ts:72:    let filteredQuotes = [...mockAbandonedQuotes]
apps/web/app/api/admin/review/counts/route.ts:5:    const mockCounts = {
apps/web/app/api/admin/review/counts/route.ts:12:    return NextResponse.json(mockCounts);
apps/web/app/api/admin/review/[quoteId]/route.ts:8:    // Mock workspace data
apps/web/app/api/admin/review/[quoteId]/route.ts:9:    const mockData = {
apps/web/app/api/admin/review/[quoteId]/route.ts:58:    return NextResponse.json(mockData);
apps/web/app/api/admin/review/[quoteId]/route.ts:71:    // Mock price simulation
apps/web/app/api/admin/review/[quoteId]/route.ts:72:    const mockResult = {
apps/web/app/api/admin/review/[quoteId]/route.ts:120:    return NextResponse.json(mockResult);
apps/web/app/api/admin/review/[quoteId]/simulate/route.ts:10:    // Mock price simulation
apps/web/app/api/admin/review/[quoteId]/simulate/route.ts:11:    const mockResult = {
apps/web/app/api/admin/review/[quoteId]/simulate/route.ts:59:    return NextResponse.json(mockResult);
apps/web/app/api/admin/review/route.ts:6:    // For now, return mock data
apps/web/app/api/admin/review/route.ts:7:    const mockData = {
apps/web/app/api/admin/review/route.ts:31:    return NextResponse.json(mockData);
apps/web/app/api/admin/pricing/config/route.ts:3:// Mock pricing configuration - in production this would come from a database
apps/web/app/api/admin/pricing/config/route.ts:4:const mockPricingConfig = {
apps/web/app/api/admin/pricing/config/route.ts:73:    return NextResponse.json(mockPricingConfig);
apps/web/app/api/files/mock-upload/[fileId]/route.ts:7:    console.log(`Mock file upload received for fileId: ${fileId}`);
apps/web/app/api/files/mock-upload/[fileId]/route.ts:35:    console.error('Mock upload error:', error);
apps/web/app/api/files/mock-upload/[fileId]/route.ts:38:      { error: 'Mock upload failed' },
apps/web/app/api/files/upload/route.ts:58:    // For now, use mock file handling since database is not fully configured
apps/web/app/api/files/upload/route.ts:62:    // For development/demo, create a mock signed URL that will be handled by the frontend
apps/web/app/api/files/upload/route.ts:64:    const mockSignedUrl = `https://app.frigate.ai/api/files/mock-upload/${fileId}`;
apps/web/app/api/files/upload/route.ts:66:    console.log(`Created mock signed URL for ${fileName}: ${mockSignedUrl}`);
apps/web/app/api/files/upload/route.ts:70:      signedUrl: mockSignedUrl,
apps/web/app/dashboard/page.tsx:22:// Mock data for demonstration
apps/web/app/dashboard/page.tsx:23:const mockRecentQuotes = [
apps/web/app/dashboard/page.tsx:53:const mockResumeData = [
apps/web/app/dashboard/page.tsx:155:                      {mockRecentQuotes.map((quote) => (
apps/web/app/dashboard/page.tsx:201:                  {mockResumeData.map((file) => (
apps/web/app/customers/page.tsx:51:  // Mock customer data
apps/web/app/customers/page.tsx:62:  // Mock quotes data
apps/web/app/customers/page.tsx:111:  // Mock orders data
apps/web/app/help/[slug]/page.tsx:30:  // Mock data for development
apps/web/app/help/[slug]/page.tsx:31:  const mockArticle: HelpArticle = {
apps/web/app/help/[slug]/page.tsx:93:  const mockRelatedArticles: HelpArticle[] = [
apps/web/app/help/[slug]/page.tsx:120:      setArticle(mockArticle);
apps/web/app/help/[slug]/page.tsx:121:      setRelatedArticles(mockRelatedArticles);
apps/web/app/help/contact/page.tsx:118:      // Mock API call
apps/web/app/help/HelpClient.tsx:46:  // Mock data for development
apps/web/app/help/HelpClient.tsx:47:  const mockArticles: HelpArticle[] = [
apps/web/app/help/HelpClient.tsx:74:      setArticles(mockArticles);
apps/web/app/help/HelpClient.tsx:82:      // Mock search results
apps/web/app/help/HelpClient.tsx:83:      const results = mockArticles.filter(article =>
apps/web/app/(auth)/invite/page.tsx:23:    // For now, we'll return mock data
apps/web/app/(auth)/invite/page.tsx:24:    const mockInvite = {
apps/web/app/(auth)/invite/page.tsx:37:    return mockInvite
apps/web/app/instant-quote/page.tsx:307:        console.log('Using mock successful upload response');
apps/web/app/analytics/page.tsx:25:  // Mock analytics data
apps/web/app/portal/quotes/[id]/attachments/AttachmentsClient.tsx:52:  // Mock data
apps/web/app/portal/quotes/[id]/attachments/AttachmentsClient.tsx:53:  const mockAttachments: Attachment[] = [
apps/web/app/portal/quotes/[id]/attachments/AttachmentsClient.tsx:86:  const mockQuoteLines: QuoteLine[] = [
apps/web/app/portal/quotes/[id]/attachments/AttachmentsClient.tsx:99:      setAttachments(mockAttachments);
apps/web/app/portal/quotes/[id]/attachments/AttachmentsClient.tsx:100:      setQuoteLines(mockQuoteLines);
apps/web/app/portal/quotes/[id]/page.tsx:91:// Mock data based on specification
apps/web/app/portal/quotes/[id]/page.tsx:92:const mockQuoteData: Quote = {
apps/web/app/portal/quotes/[id]/page.tsx:167:const mockActivityEvents: ActivityEvent[] = [
apps/web/app/portal/quotes/[id]/page.tsx:188:const mockLeadTimeOptions = {
apps/web/app/portal/quotes/[id]/page.tsx:205:  const [quote, setQuote] = useState(mockQuoteData);
apps/web/app/portal/quotes/[id]/page.tsx:217:      const leadTimeOption = [...mockLeadTimeOptions.usa, ...mockLeadTimeOptions.international]
apps/web/app/portal/quotes/[id]/page.tsx:432:                            [...mockLeadTimeOptions.usa, ...mockLeadTimeOptions.international]
apps/web/app/portal/quotes/[id]/page.tsx:438:                            [...mockLeadTimeOptions.usa, ...mockLeadTimeOptions.international]
apps/web/app/portal/quotes/[id]/page.tsx:497:                    {mockLeadTimeOptions.usa.map((option) => (
apps/web/app/portal/quotes/[id]/page.tsx:526:                    {mockLeadTimeOptions.international.map((option) => (
apps/web/app/portal/quotes/page.tsx:89:  // Mock data for development
apps/web/app/portal/quotes/page.tsx:90:  const mockQuotes: Quote[] = [
apps/web/app/portal/quotes/page.tsx:169:      setQuotes(mockQuotes);
apps/web/app/portal/checkout/[quote_id]/result/success/page.tsx:34:  // Mock order data
apps/web/app/portal/checkout/[quote_id]/result/success/page.tsx:35:  const mockOrder: Order = {
apps/web/app/portal/checkout/[quote_id]/result/success/page.tsx:52:      setOrder(mockOrder);
apps/web/app/portal/checkout/[quote_id]/page.tsx:120:  // Mock data
apps/web/app/portal/checkout/[quote_id]/page.tsx:121:  const mockQuote: Quote = {
apps/web/app/portal/checkout/[quote_id]/page.tsx:168:      setQuote(mockQuote);
apps/web/app/admin/metrics/page.tsx:54:        <CardHeader><CardTitle className="text-sm">Database Latency (Mock)</CardTitle></CardHeader>
apps/web/app/admin/workcenter/page.tsx:36:// Mock data for workcenter
apps/web/app/admin/workcenter/page.tsx:37:const mockNeedsReview = [
apps/web/app/admin/workcenter/page.tsx:58:const mockPriced = [
apps/web/app/admin/workcenter/page.tsx:116:  // Mock data - in real implementation, this would come from API calls
apps/web/app/admin/workcenter/page.tsx:234:    // Mock API calls - in real implementation, these would be actual API calls
apps/web/app/admin/workcenter/page.tsx:243:    // Mock retry action
apps/web/app/admin/workcenter/page.tsx:256:    // Mock replay action
apps/web/app/admin/workcenter/page.tsx:274:    // Mock retry action
apps/web/app/admin/workcenter/page.tsx:772:              {mockNeedsReview.map((item) => (
apps/web/app/admin/workcenter/page.tsx:863:              {mockPriced.map((item) => (
apps/web/app/admin/pricing/page.tsx:118:        // Use mock data if API doesn't exist yet
apps/web/app/docs/_components/quickstart.tsx:138:      "provider": "taxjar-stub",
apps/web/app/quote/[id]/QuoteClient.tsx:94:  // Mock DFM checks for demonstration
apps/web/app/quote/[id]/QuoteClient.tsx:95:  const mockDfmChecks: DFMCheck[] = [
apps/web/app/quote/[id]/QuoteClient.tsx:167:      setDfmChecks(mockDfmChecks);
apps/web/app/quote/[id]/QuoteClient.tsx:428:                            highlights: { face_ids: [], edge_ids: [] }, // Mock highlights
apps/web/app/quote/[id]/configure/[line_id]/page.tsx:158:      // For now, we'll use mock data
apps/web/app/quote/[id]/configure/[line_id]/page.tsx:159:      const mockLine: QuoteLine = {
apps/web/app/quote/[id]/configure/[line_id]/page.tsx:184:      setLine(mockLine);
apps/web/app/quote/[id]/configure/[line_id]/page.tsx:186:        quantity: mockLine.qty,
apps/web/app/quote/[id]/configure/[line_id]/page.tsx:187:        process: mockLine.process,
apps/web/app/quote/[id]/configure/[line_id]/page.tsx:188:        material: mockLine.material,
apps/web/app/quote/[id]/configure/[line_id]/page.tsx:189:        finish: mockLine.finish || 'None',
apps/web/app/quote/[id]/configure/[line_id]/page.tsx:198:      setPricePreview(mockLine.pricingBreakdown || null);
apps/web/app/dfm-analysis/page.tsx:158:      // Provide fallback mock data if API fails
apps/web/app/dfm-analysis/page.tsx:159:      const mockTolerances = [
apps/web/app/dfm-analysis/page.tsx:165:      const mockFinishes = [
apps/web/app/dfm-analysis/page.tsx:171:      const mockMaterials: MaterialOption[] = [
apps/web/app/dfm-analysis/page.tsx:178:      const mockIndustries = [
apps/web/app/dfm-analysis/page.tsx:185:      const mockCertifications = [
apps/web/app/dfm-analysis/page.tsx:191:      const mockCriticality = [
apps/web/app/dfm-analysis/page.tsx:199:        tolerancesRes?.ok ? tolerancesRes.json() : Promise.resolve(mockTolerances),
apps/web/app/dfm-analysis/page.tsx:200:        finishesRes?.ok ? finishesRes.json() : Promise.resolve(mockFinishes),
apps/web/app/dfm-analysis/page.tsx:201:        materialsRes?.ok ? materialsRes.json() : Promise.resolve(mockMaterials),
apps/web/app/dfm-analysis/page.tsx:202:        industriesRes?.ok ? industriesRes.json() : Promise.resolve(mockIndustries),
apps/web/app/dfm-analysis/page.tsx:203:        certificationsRes?.ok ? certificationsRes.json() : Promise.resolve(mockCertifications),
apps/web/app/dfm-analysis/page.tsx:204:        criticalityRes?.ok ? criticalityRes.json() : Promise.resolve(mockCriticality)
apps/web/e2e/widget-embed.spec.ts:24:    await fileChooser.setFiles('./fixtures/test-part.stl');
apps/web/e2e/widget-embed.spec.ts:68:    await fileChooser.setFiles('./fixtures/part-with-issues.stl');
apps/web/e2e/widget-embed.spec.ts:87:    await fileChooser.setFiles('./fixtures/test-part.stl');
apps/web/public/embed-test.html:37:      mockOrigin: new URL(document.location.search).searchParams.get('mock_origin') || document.location.origin
apps/web/public/embed-test.html:70:      log('INFO', `Using mock origin: ${config.mockOrigin}`);
apps/web/.turbo/turbo-lint.log:545:[36m./app/api/dfm/mock-upload/[fileId]/route.ts[39m
apps/web/.turbo/turbo-lint.log:577:[36m./app/api/files/mock-upload/[fileId]/route.ts[39m
apps/web/.turbo/turbo-lint.log:909:[33m77[39m:[33m6[39m  [33m[1mWarning[22m[39m: React Hook useEffect has a missing dependency: 'mockArticles'. Either include it or remove the dependency array.  [90m[1mreact-hooks/exhaustive-deps[22m[39m
apps/web/.turbo/turbo-lint.log:910:[33m91[39m:[33m6[39m  [33m[1mWarning[22m[39m: React Hook useCallback has a missing dependency: 'mockArticles'. Either include it or remove the dependency array.  [90m[1mreact-hooks/exhaustive-deps[22m[39m
apps/web/.turbo/turbo-lint.log:921:[33m124[39m:[33m6[39m  [33m[1mWarning[22m[39m: React Hook useEffect has missing dependencies: 'mockArticle' and 'mockRelatedArticles'. Either include them or remove the dependency array.  [90m[1mreact-hooks/exhaustive-deps[22m[39m
apps/web/.turbo/turbo-lint.log:1215:[33m173[39m:[33m6[39m  [33m[1mWarning[22m[39m: React Hook useEffect has a missing dependency: 'mockQuote'. Either include it or remove the dependency array.  [90m[1mreact-hooks/exhaustive-deps[22m[39m
apps/web/.turbo/turbo-lint.log:1246:[33m57[39m:[33m6[39m  [33m[1mWarning[22m[39m: React Hook useEffect has a missing dependency: 'mockOrder'. Either include it or remove the dependency array.  [90m[1mreact-hooks/exhaustive-deps[22m[39m
apps/web/.turbo/turbo-lint.log:1415:[33m105[39m:[33m6[39m  [33m[1mWarning[22m[39m: React Hook useEffect has missing dependencies: 'mockAttachments' and 'mockQuoteLines'. Either include them or remove the dependency array.  [90m[1mreact-hooks/exhaustive-deps[22m[39m
apps/web/.turbo/turbo-lint.log:1442:[33m167[39m:[33m7[39m  [31m[1mError[22m[39m: 'mockActivityEvents' is assigned a value but never used.  [90m[1m@typescript-eslint/no-unused-vars[22m[39m
apps/web/.turbo/turbo-lint.log:1456:[33m174[39m:[33m6[39m  [33m[1mWarning[22m[39m: React Hook useEffect has a missing dependency: 'mockQuotes'. Either include it or remove the dependency array.  [90m[1mreact-hooks/exhaustive-deps[22m[39m
apps/web/src/app/quote-management/page.tsx:8:// Mock comparison data
apps/web/src/app/quote-management/page.tsx:9:const MOCK_COMPARISON_OPTIONS = [
apps/web/src/app/quote-management/page.tsx:185:              options={MOCK_COMPARISON_OPTIONS}
apps/web/src/lib/auth.ts:34:    // Mock user database - in production, this would be a real database query
apps/web/src/lib/auth.ts:85:    // Mock registration - in production, this would create a new user in the database
apps/web/src/components/providers/PayPalProvider.tsx:3:// Temporary mock PayPal provider while we resolve server-side context issues
apps/web/src/components/dfm/AdvancedDFMAnalysis.tsx:601:                  <span className="text-sm text-muted-foreground">Fixture Complexity:</span>
apps/web/src/components/dfm/AdvancedDFMAnalysis.tsx:602:                  <Badge className="ml-2" variant={analysis.processRecommendations.fixtureComplexity === 'complex' ? 'destructive' : 'outline'}>
apps/web/src/components/dfm/AdvancedDFMAnalysis.tsx:603:                    {analysis.processRecommendations.fixtureComplexity}
apps/web/src/components/instant-quote/QuoteHistory.tsx:47:// Mock data for demonstration
apps/web/src/components/instant-quote/QuoteHistory.tsx:48:const MOCK_QUOTES: QuoteHistoryItem[] = [
apps/web/src/components/instant-quote/QuoteHistory.tsx:131:  quotes = MOCK_QUOTES,
apps/web/src/components/instant-quote/EnhancedInstantQuote.tsx:53:    // Mock part data
apps/web/src/components/instant-quote/EnhancedInstantQuote.tsx:54:    const mockPart: PartData = {
apps/web/src/components/instant-quote/EnhancedInstantQuote.tsx:57:      meshUrl: '/api/geometry/mock-part/mesh?lod=low',
apps/web/src/components/instant-quote/EnhancedInstantQuote.tsx:64:    // Mock quick stats
apps/web/src/components/instant-quote/EnhancedInstantQuote.tsx:65:    const mockStats: QuickStats = {
apps/web/src/components/instant-quote/EnhancedInstantQuote.tsx:72:    setUploadedPart(mockPart);
apps/web/src/components/instant-quote/EnhancedInstantQuote.tsx:73:    setQuickStats(mockStats);
apps/web/src/components/checkout/PaymentStep.tsx:35:  // Mock saved payment methods
apps/web/src/components/checkout/BillingStep.tsx:58:  // Mock saved payment methods
apps/web/src/components/checkout/BillingStep.tsx:83:    // Mock organization default address
apps/web/src/components/checkout/ShippingStep.tsx:65:  // Mock shipping rates
apps/web/src/components/checkout/ShippingStep.tsx:66:  const mockShippingRates: ShippingRate[] = [
apps/web/src/components/checkout/ShippingStep.tsx:104:    setShippingRates(mockShippingRates);
apps/web/src/components/viewer/CadViewerSection.tsx:58:      // For now, using mock data
apps/web/src/components/portal/dashboard/InstantQuoteCard.tsx:166:            fileId: u.fileId || `mock_${u.id}`,
apps/web/src/components/admin/AbandonedTimelineDrawer.tsx:33:    // Mock data for the drawer
apps/web/src/components/admin/AbandonedQuotesTable.tsx:55:      await assignQuote(quoteId, 'user-123') // Mock user ID
apps/web/src/components/admin/AbandonedFilters.tsx:42:  const abandonmentRate = 23.5 // Mock data - would be calculated from actual data
apps/web/web_app.log:110: [2m78[0m |     // For development, skip Supabase authentication and use mock upload
apps/web/web_app.log:165: [2m78[0m |     // For development, skip Supabase authentication and use mock upload
apps/web/web_app.log:232:Development mode: Using mock upload URL
apps/web/web_app.log:247:Development mode: Using mock upload URL
apps/web/web_app.log:271:  115 |   const machine = mockPricingConfig.machines['3-axis-milling'];
apps/web/web_app.log:274:  117 |   const tolerance_mult = mockPricingConfig.tolerance_packs[tolerance_pack]?.cycle_time_multiplier || 1.0;
apps/web/web_app.log:285:  138 |     // Generate dynamic mock data based on quote ID
apps/web/web_app.log:295:  138 |     // Generate dynamic mock data based on quote ID
apps/web/web_app.log:305:  138 |     // Generate dynamic mock data based on quote ID
apps/web/web_app.log:315:  138 |     // Generate dynamic mock data based on quote ID
apps/web/web_app.log:320:Failed to send welcome email: ReferenceError: Cannot access 'mockLead' before initialization
apps/web/web_app.log:324:> 101 |             leadId: mockLead.id
apps/web/__tests__/pricing/optimistic.test.ts:18:// Helper to create mock request
apps/web/__tests__/pricing/optimistic.test.ts:19:function mockRequest(overrides?: Partial<PricingRequest>): PricingRequest {
apps/web/__tests__/pricing/optimistic.test.ts:31:// Helper to create mock response
apps/web/__tests__/pricing/optimistic.test.ts:32:function mockResponse(overrides?: Partial<AnnotatedPricingResponse>): AnnotatedPricingResponse {
apps/web/__tests__/pricing/optimistic.test.ts:52:    const request = mockRequest({ quantity: 5 });
apps/web/__tests__/pricing/optimistic.test.ts:59:    const prev = mockResponse({ total: 100, subtotal: 84.75, tax: 15.25, __qty: 1 });
apps/web/__tests__/pricing/optimistic.test.ts:60:    const next = mockRequest({ quantity: 5 });
apps/web/__tests__/pricing/optimistic.test.ts:73:    const prev = mockResponse({ total: 100, __mat: 'AL6061' });
apps/web/__tests__/pricing/optimistic.test.ts:74:    const nextToSS = mockRequest({ material_code: 'SS304' });
apps/web/__tests__/pricing/optimistic.test.ts:82:    const prev = mockResponse({ total: 100, __lead: 'std' });
apps/web/__tests__/pricing/optimistic.test.ts:84:    const econEstimate = optimisticEstimate(prev, mockRequest({ lead_class: 'econ' }));
apps/web/__tests__/pricing/optimistic.test.ts:85:    const expressEstimate = optimisticEstimate(prev, mockRequest({ lead_class: 'express' }));
apps/web/__tests__/pricing/optimistic.test.ts:92:    const prev = mockResponse({ total: 100 });
apps/web/__tests__/pricing/optimistic.test.ts:93:    const estimate = optimisticEstimate(prev, mockRequest({ quantity: 2 }));
apps/web/__tests__/pricing/optimistic.test.ts:99:    const prev = mockResponse({ subtotal: 100, tax: 18, total: 118 });
apps/web/__tests__/pricing/optimistic.test.ts:100:    const estimate = optimisticEstimate(prev, mockRequest({ quantity: 2 }));
apps/web/__tests__/pricing/optimistic.test.ts:111:    const request = mockRequest({
apps/web/__tests__/pricing/optimistic.test.ts:131:    const server = mockResponse({ total: 100 });
apps/web/__tests__/pricing/optimistic.test.ts:132:    const optimistic = mockResponse({ total: 105 }); // 5% difference
apps/web/__tests__/pricing/optimistic.test.ts:138:    const server = mockResponse({ total: 100 });
apps/web/__tests__/pricing/optimistic.test.ts:139:    const optimistic = mockResponse({ total: 120 }); // 20% difference
apps/web/__tests__/pricing/optimistic.test.ts:145:    const server = mockResponse({ total: 1 });
apps/web/__tests__/pricing/optimistic.test.ts:146:    const optimistic = mockResponse({ total: 0 });
apps/web/__tests__/pricing/optimistic.test.ts:166:    const request = mockRequest({ quantity: 5, material_code: 'SS304' });
apps/web/__tests__/pricing/optimistic.test.ts:179:    const confidence = estimateConfidence(undefined, mockRequest());
apps/web/__tests__/pricing/optimistic.test.ts:184:    const prev = mockResponse({ __qty: 5, __mat: 'AL6061', __proc: 'cnc_milling' });
apps/web/__tests__/pricing/optimistic.test.ts:185:    const next = mockRequest({ quantity: 5, material_code: 'AL6061', process: 'cnc_milling' });
apps/web/__tests__/pricing/optimistic.test.ts:192:    const prev = mockResponse({ __mat: 'AL6061' });
apps/web/__tests__/pricing/optimistic.test.ts:193:    const next = mockRequest({ material_code: 'SS304' });
apps/web/__tests__/pricing/optimistic.test.ts:200:    const prev = mockResponse({ __qty: 1 });
apps/web/__tests__/pricing/optimistic.test.ts:201:    const next = mockRequest({ quantity: 10 });
apps/web/__tests__/pricing/optimistic.test.ts:210:    const req1 = mockRequest({ quantity: 5, material_code: 'AL6061' });
apps/web/__tests__/pricing/optimistic.test.ts:211:    const req2 = mockRequest({ quantity: 5, material_code: 'AL6061' });
apps/web/__tests__/pricing/optimistic.test.ts:220:    const req1 = mockRequest({ finishes: ['anodize', 'bead-blast'] });
apps/web/__tests__/pricing/optimistic.test.ts:221:    const req2 = mockRequest({ finishes: ['bead-blast', 'anodize'] });
apps/web/__tests__/pricing/optimistic.test.ts:230:    const req1 = mockRequest({
apps/web/__tests__/pricing/optimistic.test.ts:237:    const req2 = mockRequest({
apps/web/__tests__/pricing/optimistic.test.ts:253:    const request = mockRequest();
apps/web/__tests__/pricing/optimistic.test.ts:262:    const req1 = mockRequest({ quantity: 1 });
apps/web/__tests__/pricing/optimistic.test.ts:263:    const req2 = mockRequest({ quantity: 2 });
apps/web/__tests__/pricing/optimistic.test.ts:272:    const req1 = mockRequest({ finishes: ['a', 'b'] });
apps/web/__tests__/pricing/optimistic.test.ts:273:    const req2 = mockRequest({ finishes: ['b', 'a'] });
apps/web/__tests__/pricing/optimistic.test.ts:284:    const req1 = mockRequest();
apps/web/__tests__/pricing/optimistic.test.ts:285:    const req2 = mockRequest();
apps/web/__tests__/pricing/optimistic.test.ts:291:    const req1 = mockRequest({ quantity: 1 });
apps/web/__tests__/pricing/optimistic.test.ts:292:    const req2 = mockRequest({ quantity: 2 });
packages/shared/src/types/schema.ts.backup:699:  fixture_types: z.array(z.string()),
packages/shared/src/types/schema.ts.backup:889:  fixture_types: z.array(z.string()),
packages/shared/src/types/schema.ts.backup:1079:  fixture_types: z.array(z.string()),
packages/shared/src/types/schema.ts.backup:1269:  fixture_types: z.array(z.string()),
packages/shared/src/types/schema.ts.backup:1459:  fixture_types: z.array(z.string()),
packages/shared/src/types/schema.ts.backup:1649:  fixture_types: z.array(z.string()),
packages/shared/src/types/schema.ts:713:  fixture_types: z.array(z.string()),
packages/shared/src/finish-cost.util.test.ts:7:  const mockMachine = { hourly_rate: 80 } as any;
packages/shared/src/finish-cost.util.test.ts:11:    const c = computeFinishCostPerPart(baseFinish, mockMachine, { partSurfaceAreaCm2: 100 });
packages/shared/src/finish-cost.util.test.ts:17:    const c = computeFinishCostPerPart(f, mockMachine, { partSurfaceAreaCm2: 50 });
packages/shared/src/finish-cost.util.test.ts:24:    const c = computeFinishCostPerPart(f, mockMachine, { partSurfaceAreaCm2: 200 });
packages/shared/src/pricing.compute.ts:9: * modeling, nesting, fixture amortization, real material density, and stochastic adjustments.
apps/api/src/queues/jobs/dfm-analysis.processor.ts:90:    // For now, return mock data
apps/api/src/queues/jobs/dfm-analysis.processor.ts:91:    this.logger.debug('Parsing CAD file (mock implementation)');
apps/api/src/queues/jobs/dfm-analysis.processor.ts:114:    this.logger.debug('Extracting features (mock implementation)');
apps/api/src/queues/jobs/dfm-analysis.processor.ts:128:    this.logger.debug('Running DFM checks (mock implementation)');
apps/api/src/queues/jobs/dfm-analysis.processor.ts:287:    this.logger.debug('Generating viewer mesh (mock implementation)');
apps/api/src/modules/catalog/catalog.service.ts:157:    // Mock data for instant quote - in production, fetch from materials table
apps/api/src/modules/catalog/catalog.service.ts:221:    // Mock data for instant quote
apps/api/src/modules/payments/payments.service.ts:255:        // Analytics event stub (assuming analytics_events table exists)
apps/api/src/modules/quotes/quotes.service.spec.ts:3:jest.mock('resend', () => ({
apps/api/src/modules/quotes/quotes.service.spec.ts:4:  Resend: jest.fn().mockImplementation(() => ({
apps/api/src/modules/quotes/quotes.service.spec.ts:5:    emails: { send: jest.fn().mockResolvedValue({}) },
apps/api/src/modules/quotes/quotes.service.spec.ts:28:    const single = jest.fn<Promise<SupabaseSelectResponse>, []>().mockResolvedValue({
apps/api/src/modules/quotes/quotes.service.spec.ts:33:    const fromMock = jest.fn().mockReturnValue({
apps/api/src/modules/quotes/quotes.service.spec.ts:34:      select: jest.fn().mockReturnThis(),
apps/api/src/modules/quotes/quotes.service.spec.ts:35:      eq: jest.fn().mockReturnThis(),
apps/api/src/modules/quotes/quotes.service.spec.ts:37:      maybeSingle: jest.fn().mockResolvedValue({ data: null, error: null }),
apps/api/src/modules/quotes/quotes.service.spec.ts:40:    const supabase = { client: { from: fromMock } } as unknown as SupabaseService;
apps/api/src/modules/quotes/quotes.service.spec.ts:56:      notifyQuoteStatusChange: jest.fn().mockResolvedValue(undefined),
apps/api/src/modules/quotes/quotes.service.spec.ts:64:    jest.restoreAllMocks();
apps/api/src/modules/quotes/quotes.service.spec.ts:71:      .mockResolvedValue({ ...baseQuoteRow, status: 'processing' } as any);
apps/api/src/modules/quotes/quotes.service.spec.ts:89:      .mockResolvedValue({ ...baseQuoteRow, status: 'ready' } as any);
apps/api/src/modules/quotes/quotes.service.spec.ts:107:      .mockResolvedValue({ ...baseQuoteRow, status: 'cancelled' } as any);
apps/api/src/modules/quotes/quotes.service.spec.ts:132:      .mockResolvedValue({ ...baseQuoteRow, status: 'converted' } as any);
apps/api/src/modules/quotes/quote-preview.e2e.spec.ts:3:jest.mock('../../auth/rbac.middleware', () => ({
apps/api/src/modules/quotes/quote-preview.e2e.spec.ts:27:  const supabaseQueryMock = {
apps/api/src/modules/quotes/quote-preview.e2e.spec.ts:28:    select: () => supabaseQueryMock,
apps/api/src/modules/quotes/quote-preview.e2e.spec.ts:33:    const moduleFixture: TestingModule = await Test.createTestingModule({
apps/api/src/modules/quotes/quote-preview.e2e.spec.ts:43:          from: () => supabaseQueryMock
apps/api/src/modules/quotes/quote-preview.e2e.spec.ts:54:    app = moduleFixture.createNestApplication();
apps/api/src/modules/quotes/quote-revisions.service.ts:80:    // For now we return a minimal stub as we do not re-materialize a mutated quote yet.
apps/api/src/modules/admin-health/admin-health.service.ts:73:      // For now, return a mock health status since we don't have HTTP client set up
apps/api/src/modules/admin-health/admin-health.service.ts:101:      // Get queue stats (mock for now)
apps/api/src/modules/admin-health/admin-health.service.ts:166:      // Check Stripe connectivity (mock for now)
apps/api/src/modules/admin-health/admin-health.service.ts:194:      // Check PayPal connectivity (mock for now)
apps/api/src/modules/admin-health/admin-health.service.ts:394:    // For now, return mock data
apps/api/src/modules/dfm/dfm.service.spec.ts:16:  const mockRules = [
apps/api/src/modules/dfm/dfm.service.spec.ts:47:              from: jest.fn().mockReturnThis(),
apps/api/src/modules/dfm/dfm.service.spec.ts:48:              select: jest.fn().mockReturnThis(),
apps/api/src/modules/dfm/dfm.service.spec.ts:49:              eq: jest.fn().mockResolvedValue({ data: mockRules }),
apps/api/src/modules/dfm/dfm.service.spec.ts:56:            get: jest.fn().mockResolvedValue(null),
apps/api/src/modules/dfm/dfm.service.spec.ts:57:            set: jest.fn().mockResolvedValue(undefined),
apps/api/src/modules/dfm/dfm.service.spec.ts:90:    // Mock the private _client property
apps/api/src/modules/dfm/dfm.service.spec.ts:93:        from: jest.fn().mockReturnThis(),
apps/api/src/modules/dfm/dfm.service.spec.ts:94:        select: jest.fn().mockReturnThis(),
apps/api/src/modules/dfm/dfm.service.spec.ts:95:        eq: jest.fn().mockResolvedValue({ data: [] }),
apps/api/src/modules/dfm/dfm.service.spec.ts:120:    jest.spyOn(cache, "get").mockResolvedValue(mockRules);
apps/api/src/modules/admin-system/admin-system.service.ts:121:      // For now, return mock data
apps/api/src/modules/ai/advanced-dfm.service.ts:122:    fixtureComplexity: 'simple' | 'moderate' | 'complex';
apps/api/src/modules/ai/advanced-dfm.service.ts:886:    // Fixture complexity
apps/api/src/modules/ai/advanced-dfm.service.ts:887:    let fixtureComplexity: 'simple' | 'moderate' | 'complex' = 'simple';
apps/api/src/modules/ai/advanced-dfm.service.ts:889:      fixtureComplexity = 'moderate';
apps/api/src/modules/ai/advanced-dfm.service.ts:892:      fixtureComplexity = 'complex';
apps/api/src/modules/ai/advanced-dfm.service.ts:901:      fixtureComplexity,
apps/api/src/modules/review/review.controller.ts:121:    // Mock CSV export
apps/api/src/modules/review/review.service.ts:6:    // Mock review queue data
apps/api/src/modules/review/review.service.ts:83:    // Mock assignment
apps/api/src/modules/review/review.service.ts:93:    // Mock move
apps/api/src/modules/review/review.service.ts:103:    // Mock workspace data
apps/api/src/modules/review/review.service.ts:190:    // Mock price simulation
apps/api/src/modules/review/review.service.ts:241:    // Mock override application
apps/api/src/modules/review/review.service.ts:254:    // Mock DFM acknowledgement
apps/api/src/modules/review/review.service.ts:266:    // Mock annotation
apps/api/src/modules/review/review.service.ts:278:    // Mock change request
apps/api/src/modules/review/review.service.ts:292:    // Mock note addition
apps/api/src/modules/admin-alerts/admin-alerts.service.ts:425:    // For now, return a mock value
apps/api/src/modules/queue-monitor/queue-monitor.service.ts:179:    // Mock database metrics - in real implementation, this would query actual DB metrics
apps/api/src/modules/queue-monitor/queue-monitor.service.ts:193:    // Mock webhook status - in real implementation, this would query webhook logs
apps/api/src/modules/queue-monitor/queue-monitor.service.ts:211:    // Mock webhook replay - in real implementation, this would trigger webhook replays
apps/api/src/modules/queue-monitor/queue-monitor.service.ts:220:    // Mock SLO metrics - in real implementation, this would calculate from actual metrics
apps/api/src/modules/queue-monitor/queue-monitor.service.ts:230:    // Mock error data - in real implementation, this would query Sentry/error logs
apps/api/src/modules/queue-monitor/queue-monitor.service.ts:248:    // Mock review summary - in real implementation, this would query review queue
apps/api/src/modules/pricing/pricing-engine-v2.service.spec.ts:77:  const mockFnFactory = typeof globalRef.jest?.fn === 'function' ? globalRef.jest.fn : undefined;
apps/api/src/modules/pricing/pricing-engine-v2.service.spec.ts:78:  const getEnv = mockFnFactory ? mockFnFactory(() => undefined) : (() => undefined);
apps/api/src/modules/pricing/pricing-engine-v2.service.spec.ts:205:    const materialStub = {
apps/api/src/modules/pricing/pricing-engine-v2.service.spec.ts:208:      name: 'Stub Material',
apps/api/src/modules/pricing/pricing-engine-v2.service.spec.ts:219:    const getMaterialSpy = jestFactory.fn().mockResolvedValue(materialStub);
apps/api/src/modules/pricing/pricing-engine-v2.service.spec.ts:229:    const regionArg = getMaterialSpy.mock.calls[0]?.[1];
apps/api/src/modules/pricing/pricing-engine-v2.service.ts:1893:    // Mock data for now
apps/api/src/modules/pricing/pricing-engine-v2.service.ts:1904:    // Mock machine rates per minute
apps/api/src/modules/pricing/pricing.service.spec.ts:13:  const _mockProfile = {
apps/api/src/modules/pricing/pricing.service.spec.ts:26:  const mockPricingProfile = {
apps/api/src/modules/pricing/pricing.service.spec.ts:63:              from: jest.fn().mockReturnThis(),
apps/api/src/modules/pricing/pricing.service.spec.ts:64:              select: jest.fn().mockReturnThis(),
apps/api/src/modules/pricing/pricing.service.spec.ts:65:              eq: jest.fn().mockReturnThis(),
apps/api/src/modules/pricing/pricing.service.spec.ts:66:              single: jest.fn().mockImplementation(async () => {
apps/api/src/modules/pricing/pricing.service.spec.ts:67:                return { data: mockPricingProfile };
apps/api/src/modules/pricing/pricing.service.spec.ts:75:            get: jest.fn().mockImplementation(async (key) => {
apps/api/src/modules/pricing/pricing.service.spec.ts:80:            set: jest.fn().mockResolvedValue(undefined),
apps/api/src/modules/pricing/pricing.service.spec.ts:81:            getCacheKey: jest.fn().mockReturnValue("test-key"),
apps/api/src/modules/pricing/pricing.service.spec.ts:87:            shouldReviewPrice: jest.fn().mockResolvedValue(false),
apps/api/src/modules/pricing/pricing.service.spec.ts:88:            checkQuoteForReview: jest.fn().mockResolvedValue(false),
apps/api/src/modules/pricing/pricing.service.spec.ts:242:    expect(result.total_price).toBeGreaterThanOrEqual(mockPricingProfile.min_order_value);
apps/api/src/modules/pricing/pricing.gateway.spec.ts:12:// Mock the pricing engine service BEFORE importing it in Nest context
apps/api/src/modules/pricing/pricing.gateway.spec.ts:13:jest.mock('./pricing-engine-v2.service', () => ({
apps/api/src/modules/pricing/pricing.gateway.spec.ts:28:jest.mock('./pricing-persistence.service', () => ({
apps/api/src/modules/pricing/pricing.gateway.spec.ts:70:            persistMatrixAndTotals: jest.fn().mockResolvedValue(undefined)
apps/api/src/modules/pricing/pricing.gateway.spec.ts:77:              from: jest.fn().mockReturnValue({
apps/api/src/modules/pricing/pricing.gateway.spec.ts:78:                select: jest.fn().mockReturnThis(),
apps/api/src/modules/pricing/pricing.gateway.spec.ts:79:                eq: jest.fn().mockReturnThis(),
apps/api/src/modules/pricing/pricing.gateway.spec.ts:80:                single: jest.fn().mockResolvedValue({ data: { id: 'quote1' } }),
apps/api/src/modules/pricing/pricing.gateway.spec.ts:96:    // Mock chain for quote_items
apps/api/src/modules/pricing/pricing.gateway.spec.ts:97:    // we need a distinct mock for .from('quote_items') vs others
apps/api/src/modules/geometry/geometry.service.ts:194:    // metrics.volume is cm^3, surface_area is cm^2 in current mock analyzer
apps/api/src/modules/leads/leads.service.spec.ts:15:  // Custom queued response mock to emulate Supabase query builder + await semantics
apps/api/src/modules/leads/leads.service.spec.ts:35:        createUser: jest.fn().mockResolvedValue({ data: { user: { id: 'user-auth-123' } }, error: null })
apps/api/src/modules/leads/leads.service.spec.ts:39:  const mockSupabaseClient: any = builder;
apps/api/src/modules/leads/leads.service.spec.ts:41:  const mockAuthService = {
apps/api/src/modules/leads/leads.service.spec.ts:42:    sendInvite: jest.fn().mockResolvedValue({ inviteId: 'invite-123', sessionToken: 'session-token-abc' })
apps/api/src/modules/leads/leads.service.spec.ts:49:        { provide: SupabaseService, useValue: { client: mockSupabaseClient } },
apps/api/src/modules/leads/leads.service.spec.ts:50:        { provide: AuthService, useValue: mockAuthService }
apps/api/src/modules/leads/leads.service.spec.ts:58:    jest.clearAllMocks();
apps/api/src/modules/leads/leads.service.spec.ts:68:    const mockIp = '192.168.1.1';
apps/api/src/modules/leads/leads.service.spec.ts:81:      const result = await service.createLead(createLeadDto, mockIp);
apps/api/src/modules/leads/leads.service.spec.ts:91:      const result = await service.createLead(createLeadDto, mockIp);
apps/api/src/modules/leads/leads.service.spec.ts:99:      await expect(service.createLead(createLeadDto, mockIp)).rejects.toThrow('Too many submissions');
apps/api/src/modules/leads/leads.service.spec.ts:104:      await expect(service.createLead(invalidDto as any, mockIp)).rejects.toThrow('Invalid email');
apps/api/src/modules/admin/admin.service.ts:5:  private readonly mockUsers = [
apps/api/src/modules/admin/admin.service.ts:13:  private readonly mockOrgs = [
apps/api/src/modules/admin/admin.service.ts:20:    let src = this.mockUsers;
apps/api/src/modules/admin/admin.service.ts:37:    let src = this.mockOrgs;
apps/api/src/modules/admin/admin.service.ts:51:    // Mock review summary - in real implementation, this would query the manual review service
apps/api/src/modules/admin/admin.service.ts:79:    // Mock database metrics - in real implementation, this would query actual DB metrics
apps/api/src/modules/admin/admin.service.ts:93:    // Mock webhook status - in real implementation, this would query webhook logs
apps/api/src/modules/admin/admin.service.ts:111:    // Mock webhook replay - in real implementation, this would trigger webhook replays
apps/api/src/modules/admin/admin.service.ts:120:    // Mock SLO metrics - in real implementation, this would calculate from actual metrics
apps/api/src/modules/admin/admin.service.ts:130:    // Mock error data - in real implementation, this would query Sentry/error logs
apps/api/src/modules/admin/admin.service.ts:148:    // Mock issue creation - in real implementation, this would create a ticket/issue
apps/api/src/modules/files/files.service.ts:233:    // For now, return mock response
apps/api/src/modules/files/files.service.ts:353:    const isClean = true; // Mock result
apps/api/src/routing/__tests__/recommender.e2e.spec.ts:17:    const mockService = {
apps/api/src/routing/__tests__/recommender.e2e.spec.ts:18:      recommendProcesses: jest.fn().mockResolvedValue({
apps/api/src/routing/__tests__/recommender.e2e.spec.ts:37:    const mockRateLimit = {
apps/api/src/routing/__tests__/recommender.e2e.spec.ts:38:      checkRateLimit: jest.fn().mockResolvedValue({ allowed: true }),
apps/api/src/routing/__tests__/recommender.e2e.spec.ts:41:    const mockCache = {
apps/api/src/routing/__tests__/recommender.e2e.spec.ts:42:      get: jest.fn().mockResolvedValue(null),
apps/api/src/routing/__tests__/recommender.e2e.spec.ts:43:      set: jest.fn().mockResolvedValue(undefined),
apps/api/src/routing/__tests__/recommender.e2e.spec.ts:49:        { provide: RecommenderService, useValue: mockService },
apps/api/src/routing/__tests__/recommender.e2e.spec.ts:50:        { provide: RateLimitService, useValue: mockRateLimit },
apps/api/src/routing/__tests__/recommender.e2e.spec.ts:51:        { provide: CacheService, useValue: mockCache },
apps/api/src/pricing/featureExtraction.ts:71:        confidence_score: 0.85, // Mock confidence score
apps/api/src/pricing/bomService.ts:267:    // Workholding fixtures
apps/api/src/pricing/bomService.ts:268:    const fixtureCost = this.estimateFixtureCost(part);
apps/api/src/pricing/bomService.ts:269:    if (fixtureCost > 0) {
apps/api/src/pricing/bomService.ts:271:        id: `tooling-${part.external_id || 'unknown'}-fixtures`,
apps/api/src/pricing/bomService.ts:273:        name: 'Workholding Fixtures',
apps/api/src/pricing/bomService.ts:274:        description: 'Custom or standard fixtures for part holding',
apps/api/src/pricing/bomService.ts:276:        unit_cost: fixtureCost,
apps/api/src/pricing/bomService.ts:277:        total_cost: fixtureCost,
apps/api/src/pricing/bomService.ts:280:          fixture_type: 'custom_vise',
apps/api/src/pricing/bomService.ts:561:  private estimateFixtureCost(part: BOMGenerationInput['parts'][0]): number {
apps/api/src/pricing/bomService.ts:562:    // Fixture cost based on complexity
apps/api/src/pricing/factors/setup/setup-time.ts:28:  const fixtures = featureData.fixtures?.count ?? 0;
apps/api/src/pricing/factors/setup/setup-time.ts:29:  return base + Math.min(45, holes * 0.8 + fixtures * 2);
apps/api/src/pricing/__tests__/orchestrator.spec.ts:408:      const stubFactor: Factor = {
apps/api/src/pricing/__tests__/orchestrator.spec.ts:409:        code: 'stub_factor',
apps/api/src/pricing/__tests__/orchestrator.spec.ts:415:                code: 'stub',
apps/api/src/pricing/__tests__/orchestrator.spec.ts:416:                label: 'Stubbed result',
apps/api/src/pricing/__tests__/orchestrator.spec.ts:426:        factors: [stubFactor],
apps/api/src/tax/adapters/avalara.stub.ts:2: * Step 20: Avalara Stub Adapter
apps/api/src/tax/adapters/avalara.stub.ts:3: * Deterministic stub for EU VAT and other global taxes
apps/api/src/tax/adapters/avalara.stub.ts:15: * EU VAT standard rates (stub data)
apps/api/src/tax/adapters/avalara.stub.ts:49: * India GST rates (stub data)
apps/api/src/tax/adapters/avalara.stub.ts:55: * Avalara stub adapter (EU VAT + India GST + other regions)
apps/api/src/tax/adapters/avalara.stub.ts:57:export class AvalaraStubAdapter implements ITaxAdapter {
apps/api/src/tax/adapters/avalara.stub.ts:58:  readonly name = 'avalara-stub';
apps/api/src/tax/adapters/avalara.stub.ts:77:      // US handled by TaxJar stub
apps/api/src/tax/adapters/avalara.stub.ts:84:      // Default: no tax for other countries (stub)
apps/api/src/tax/adapters/avalara.stub.ts:249:        note: 'Country not supported - no tax applied (stub)',
apps/api/src/tax/adapters/avalara.stub.ts:262:   * Validate VAT number (stub)
apps/api/src/tax/adapters/avalara.stub.ts:265:    // Stub validation: Check format only
apps/api/src/tax/adapters/avalara.stub.ts:273:      companyName: valid ? 'Test Company (Stub)' : undefined,
apps/api/src/tax/adapters/taxjar.stub.ts:2: * Step 20: TaxJar Stub Adapter
apps/api/src/tax/adapters/taxjar.stub.ts:3: * Deterministic stub for development and testing
apps/api/src/tax/adapters/taxjar.stub.ts:15: * US State sales tax rates (stub data)
apps/api/src/tax/adapters/taxjar.stub.ts:72: * TaxJar stub adapter
apps/api/src/tax/adapters/taxjar.stub.ts:74:export class TaxJarStubAdapter implements ITaxAdapter {
apps/api/src/tax/adapters/taxjar.stub.ts:75:  readonly name = 'taxjar-stub';
apps/api/src/tax/adapters/taxjar.stub.ts:87:    // Only support US for TaxJar stub
apps/api/src/tax/adapters/taxjar.stub.ts:92:        `Country ${input.shipTo.country} not supported by TaxJar stub`,
apps/api/src/tax/adapters/taxjar.stub.ts:140:        note: 'This is a stub calculation for development only',
apps/api/src/tax/adapters/taxjar.stub.ts:147:    // Stub validation - just check required fields
apps/api/src/tax/adapters/adapter.interface.ts:59:   * Provider name (e.g., 'taxjar', 'avalara', 'stub')
apps/api/src/tax/tax.service.ts:14:import { TaxJarStubAdapter } from './adapters/taxjar.stub';
apps/api/src/tax/tax.service.ts:15:import { AvalaraStubAdapter } from './adapters/avalara.stub';
apps/api/src/tax/tax.service.ts:58:    this.registerAdapter(new TaxJarStubAdapter());
apps/api/src/tax/tax.service.ts:59:    this.registerAdapter(new AvalaraStubAdapter());
apps/api/src/tax/tax.service.ts:142:    const provider = process.env.TAX_PROVIDER || 'stub';
apps/api/src/tax/tax.service.ts:146:      return this.adapters.get('taxjar-stub');
apps/api/src/tax/tax.service.ts:148:      return this.adapters.get('avalara-stub');
apps/api/src/tax/tax.service.ts:196:    const adapter = this.adapters.get('avalara-stub');
apps/api/src/docs/examples/price-response.json:49:          "example": "taxjar-stub"
apps/api/src/docs/examples/price-response.json:80:              "example": "This is a stub calculation for development only"
apps/api/src/docs/examples/price-response.json:138:      "provider": "taxjar-stub",
apps/api/src/docs/examples/price-response.json:148:        "note": "This is a stub calculation for development only",
apps/api/test/e2e/flow.spec.ts:10:    const moduleFixture: TestingModule = await Test.createTestingModule({
apps/api/test/e2e/flow.spec.ts:14:    app = moduleFixture.createNestApplication();
apps/api/test/e2e/flow.spec.ts:26:    const mockFile = {
apps/api/test/e2e/flow.spec.ts:35:        .attach("file", mockFile.buffer, mockFile.originalname)
apps/api/test/unit/dfm.service.spec.ts:11:  const mockSupabaseService = {
apps/api/test/unit/dfm.service.spec.ts:13:      from: jest.fn().mockReturnThis(),
apps/api/test/unit/dfm.service.spec.ts:14:      select: jest.fn().mockReturnThis(),
apps/api/test/unit/dfm.service.spec.ts:15:      eq: jest.fn().mockReturnThis(),
apps/api/test/unit/dfm.service.spec.ts:20:  const mockPricingService = {
apps/api/test/unit/dfm.service.spec.ts:31:          useValue: mockPricingService,
apps/api/test/unit/dfm.service.spec.ts:35:          useValue: mockSupabaseService,
apps/api/test/unit/dfm.service.spec.ts:50:    const mockPartData = {
apps/api/test/unit/dfm.service.spec.ts:62:    const mockMaterialRules = {
apps/api/test/unit/dfm.service.spec.ts:71:      mockSupabaseService.client.single.mockResolvedValue({
apps/api/test/unit/dfm.service.spec.ts:72:        data: mockMaterialRules,
apps/api/test/unit/dfm.service.spec.ts:79:        ...mockPartData,
apps/api/test/unit/dfm.service.spec.ts:93:        ...mockPartData,
apps/api/test/unit/dfm.service.spec.ts:95:          ...mockPartData.features,
apps/api/test/unit/dfm.service.spec.ts:109:      mockPricingService.calculateComplexityFactor.mockResolvedValue(1.5);
apps/api/test/unit/dfm.service.spec.ts:111:      const result = await service.analyzePart("alu-6061", mockPartData);
apps/api/test/unit/dfm.service.spec.ts:118:      mockPricingService.calculateLeadTime.mockResolvedValue(5);
apps/api/test/unit/dfm.service.spec.ts:120:      const result = await service.analyzePart("alu-6061", mockPartData);
apps/api/test/unit/orders.service.spec.ts:7:// Create minimal mocks
apps/api/test/unit/orders.service.spec.ts:8:const mockSupabaseClient = () => {
apps/api/test/unit/orders.service.spec.ts:10:    select: jest.fn().mockReturnThis(),
apps/api/test/unit/orders.service.spec.ts:11:    eq: jest.fn().mockReturnThis(),
apps/api/test/unit/orders.service.spec.ts:13:    update: jest.fn().mockReturnThis(),
apps/api/test/unit/orders.service.spec.ts:14:    insert: jest.fn().mockReturnThis(),
apps/api/test/unit/orders.service.spec.ts:15:    order: jest.fn().mockReturnThis(),
apps/api/test/unit/orders.service.spec.ts:16:    from: jest.fn().mockImplementation(() => chain),
apps/api/test/unit/orders.service.spec.ts:21:class SupabaseServiceMock {
apps/api/test/unit/orders.service.spec.ts:22:  client = mockSupabaseClient();
apps/api/test/unit/orders.service.spec.ts:25:class NotifyServiceMock {
apps/api/test/unit/orders.service.spec.ts:26:  sendOrderNotification = jest.fn().mockResolvedValue(undefined);
apps/api/test/unit/orders.service.spec.ts:29:class QapServiceMock {
apps/api/test/unit/orders.service.spec.ts:35:  let supabase: SupabaseServiceMock;
apps/api/test/unit/orders.service.spec.ts:38:    supabase = new SupabaseServiceMock();
apps/api/test/unit/orders.service.spec.ts:44:        { provide: NotifyService, useClass: NotifyServiceMock },
apps/api/test/unit/orders.service.spec.ts:45:        { provide: QapService, useClass: QapServiceMock },
apps/api/test/unit/orders.service.spec.ts:53:    // Current order stub
apps/api/test/unit/orders.service.spec.ts:55:      .mockResolvedValueOnce({ data: { id: 'o1', status: 'draft', total_amount: 100, currency: 'usd' } }) // fetch existing
apps/api/test/unit/orders.service.spec.ts:56:      .mockResolvedValueOnce({ data: { id: 'o1', status: 'approved', total_amount: 100, currency: 'usd' } }); // after update
apps/api/test/unit/orders.service.spec.ts:58:    supabase.client.update.mockReturnThis();
apps/api/test/unit/orders.service.spec.ts:59:    supabase.client.insert.mockReturnThis();
apps/api/test/unit/orders.service.spec.ts:72:    supabase.client.single.mockResolvedValueOnce({ data: { id: 'o1', status: 'draft', total_amount: 100, currency: 'usd' } });
apps/api/test/unit/policies.spec.ts:15:  let supabase: jest.Mocked<SupabaseService>;
apps/api/test/unit/policies.spec.ts:16:  let audit: jest.Mocked<AuditService>;
apps/api/test/unit/policies.spec.ts:17:  let reflector: jest.Mocked<Reflector>;
apps/api/test/unit/policies.spec.ts:20:    // Mock Supabase service
apps/api/test/unit/policies.spec.ts:23:        from: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:24:        select: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:25:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:30:    // Mock Audit service
apps/api/test/unit/policies.spec.ts:32:      log: jest.fn().mockResolvedValue(undefined),
apps/api/test/unit/policies.spec.ts:35:    // Mock Reflector
apps/api/test/unit/policies.spec.ts:44:    jest.clearAllMocks();
apps/api/test/unit/policies.spec.ts:48:  // Helper to create mock execution context
apps/api/test/unit/policies.spec.ts:49:  function createMockContext(user: any, policies: any[]): ExecutionContext {
apps/api/test/unit/policies.spec.ts:69:      const context = createMockContext(user, policies);
apps/api/test/unit/policies.spec.ts:71:      reflector.get.mockReturnValue(policies);
apps/api/test/unit/policies.spec.ts:73:      // Mock role_id lookup
apps/api/test/unit/policies.spec.ts:74:      supabase.client.from.mockReturnValueOnce({
apps/api/test/unit/policies.spec.ts:75:        select: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:76:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:77:        single: jest.fn().mockResolvedValue({ data: { id: 'role-buyer' }, error: null }),
apps/api/test/unit/policies.spec.ts:80:      // Mock policy check
apps/api/test/unit/policies.spec.ts:81:      supabase.client.from.mockReturnValueOnce({
apps/api/test/unit/policies.spec.ts:82:        select: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:83:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:84:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:85:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:86:        single: jest.fn().mockResolvedValue({ data: { policy_id: 'policy-1' }, error: null }),
apps/api/test/unit/policies.spec.ts:98:      const context = createMockContext(user, policies);
apps/api/test/unit/policies.spec.ts:100:      reflector.get.mockReturnValue(policies);
apps/api/test/unit/policies.spec.ts:102:      // Mock role_id lookup
apps/api/test/unit/policies.spec.ts:103:      supabase.client.from.mockReturnValueOnce({
apps/api/test/unit/policies.spec.ts:104:        select: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:105:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:106:        single: jest.fn().mockResolvedValue({ data: { id: 'role-buyer' }, error: null }),
apps/api/test/unit/policies.spec.ts:109:      // Mock policy check - no matching policy
apps/api/test/unit/policies.spec.ts:110:      supabase.client.from.mockReturnValueOnce({
apps/api/test/unit/policies.spec.ts:111:        select: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:112:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:113:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:114:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:115:        single: jest.fn().mockResolvedValue({ data: null, error: { code: 'PGRST116', message: 'No rows' } }),
apps/api/test/unit/policies.spec.ts:132:      const context = createMockContext(user, policies);
apps/api/test/unit/policies.spec.ts:134:      reflector.get.mockReturnValue(policies);
apps/api/test/unit/policies.spec.ts:136:      // Mock role_id lookup
apps/api/test/unit/policies.spec.ts:137:      supabase.client.from.mockReturnValueOnce({
apps/api/test/unit/policies.spec.ts:138:        select: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:139:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:140:        single: jest.fn().mockResolvedValue({ data: { id: 'role-org_admin' }, error: null }),
apps/api/test/unit/policies.spec.ts:143:      // Mock policy check - org_admin has '*' action on quotes
apps/api/test/unit/policies.spec.ts:144:      supabase.client.from.mockReturnValueOnce({
apps/api/test/unit/policies.spec.ts:145:        select: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:146:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:147:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:148:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:149:        single: jest.fn().mockResolvedValue({ data: { policy_id: 'policy-org-admin-all-quotes' }, error: null }),
apps/api/test/unit/policies.spec.ts:162:      const context = createMockContext(user, policies);
apps/api/test/unit/policies.spec.ts:164:      reflector.get.mockReturnValue(policies);
apps/api/test/unit/policies.spec.ts:181:      const context = createMockContext(user, policies);
apps/api/test/unit/policies.spec.ts:183:      reflector.get.mockReturnValue(policies);
apps/api/test/unit/policies.spec.ts:196:      const context1 = createMockContext(user, policies);
apps/api/test/unit/policies.spec.ts:197:      const context2 = createMockContext(user, policies);
apps/api/test/unit/policies.spec.ts:199:      reflector.get.mockReturnValue(policies);
apps/api/test/unit/policies.spec.ts:201:      // Mock role_id lookup (should be called twice - once per context)
apps/api/test/unit/policies.spec.ts:202:      supabase.client.from.mockReturnValue({
apps/api/test/unit/policies.spec.ts:203:        select: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:204:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:205:        single: jest.fn().mockResolvedValue({ data: { id: 'role-buyer' }, error: null }),
apps/api/test/unit/policies.spec.ts:208:      // Mock policy check (should only be called once - second call uses cache)
apps/api/test/unit/policies.spec.ts:209:      const policyMock = {
apps/api/test/unit/policies.spec.ts:210:        select: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:211:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:212:        single: jest.fn().mockResolvedValue({ data: { policy_id: 'policy-1' }, error: null }),
apps/api/test/unit/policies.spec.ts:214:      supabase.client.from.mockReturnValueOnce(policyMock as any);
apps/api/test/unit/policies.spec.ts:225:      expect(policyMock.select).toHaveBeenCalledTimes(1);
apps/api/test/unit/policies.spec.ts:231:      const context1 = createMockContext(user, policies);
apps/api/test/unit/policies.spec.ts:232:      const context2 = createMockContext(user, policies);
apps/api/test/unit/policies.spec.ts:234:      reflector.get.mockReturnValue(policies);
apps/api/test/unit/policies.spec.ts:236:      // Mock role_id lookup
apps/api/test/unit/policies.spec.ts:237:      supabase.client.from.mockReturnValue({
apps/api/test/unit/policies.spec.ts:238:        select: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:239:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:240:        single: jest.fn().mockResolvedValue({ data: { id: 'role-buyer' }, error: null }),
apps/api/test/unit/policies.spec.ts:243:      // Mock policy check
apps/api/test/unit/policies.spec.ts:244:      const policyMock = {
apps/api/test/unit/policies.spec.ts:245:        select: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:246:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:247:        single: jest.fn().mockResolvedValue({ data: { policy_id: 'policy-1' }, error: null }),
apps/api/test/unit/policies.spec.ts:249:      supabase.client.from.mockReturnValue(policyMock as any);
apps/api/test/unit/policies.spec.ts:261:      expect(policyMock.select).toHaveBeenCalledTimes(2);
apps/api/test/unit/policies.spec.ts:269:      const context = createMockContext(user, policies);
apps/api/test/unit/policies.spec.ts:271:      reflector.get.mockReturnValue(policies);
apps/api/test/unit/policies.spec.ts:273:      // Mock role_id lookup
apps/api/test/unit/policies.spec.ts:274:      supabase.client.from.mockReturnValueOnce({
apps/api/test/unit/policies.spec.ts:275:        select: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:276:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:277:        single: jest.fn().mockResolvedValue({ data: { id: 'role-org_admin' }, error: null }),
apps/api/test/unit/policies.spec.ts:280:      // Mock policy check - org_admin has '*' action on quotes
apps/api/test/unit/policies.spec.ts:281:      supabase.client.from.mockReturnValueOnce({
apps/api/test/unit/policies.spec.ts:282:        select: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:283:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:284:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:285:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:286:        single: jest.fn().mockResolvedValue({ data: { policy_id: 'policy-wildcard' }, error: null }),
apps/api/test/unit/policies.spec.ts:297:      const context = createMockContext(user, policies);
apps/api/test/unit/policies.spec.ts:299:      reflector.get.mockReturnValue(policies);
apps/api/test/unit/policies.spec.ts:312:      const context = createMockContext(user, []);
apps/api/test/unit/policies.spec.ts:314:      reflector.get.mockReturnValue(undefined); // No @Policies decorator
apps/api/test/unit/policies.spec.ts:324:      const context = createMockContext(user, policies);
apps/api/test/unit/policies.spec.ts:326:      reflector.get.mockReturnValue(policies);
apps/api/test/unit/policies.spec.ts:337:      const context = createMockContext(user, policies);
apps/api/test/unit/policies.spec.ts:339:      reflector.get.mockReturnValue(policies);
apps/api/test/unit/policies.spec.ts:341:      // Mock role_id lookup failure
apps/api/test/unit/policies.spec.ts:342:      supabase.client.from.mockReturnValueOnce({
apps/api/test/unit/policies.spec.ts:343:        select: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:344:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:345:        single: jest.fn().mockResolvedValue({ data: null, error: { message: 'Role not found' } }),
apps/api/test/unit/policies.spec.ts:359:      const context = createMockContext(user, policies);
apps/api/test/unit/policies.spec.ts:361:      reflector.get.mockReturnValue(policies);
apps/api/test/unit/policies.spec.ts:363:      // Mock role_id lookup
apps/api/test/unit/policies.spec.ts:364:      supabase.client.from.mockReturnValue({
apps/api/test/unit/policies.spec.ts:365:        select: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:366:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:367:        single: jest.fn().mockResolvedValue({ data: { id: 'role-reviewer' }, error: null }),
apps/api/test/unit/policies.spec.ts:370:      // Mock policy checks - both should succeed for reviewer
apps/api/test/unit/policies.spec.ts:372:        .mockReturnValueOnce({
apps/api/test/unit/policies.spec.ts:373:          select: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:374:          eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:375:          single: jest.fn().mockResolvedValue({ data: { policy_id: 'policy-1' }, error: null }),
apps/api/test/unit/policies.spec.ts:377:        .mockReturnValueOnce({
apps/api/test/unit/policies.spec.ts:378:          select: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:379:          eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:380:          single: jest.fn().mockResolvedValue({ data: { policy_id: 'policy-2' }, error: null }),
apps/api/test/unit/policies.spec.ts:394:      const context = createMockContext(user, policies);
apps/api/test/unit/policies.spec.ts:396:      reflector.get.mockReturnValue(policies);
apps/api/test/unit/policies.spec.ts:398:      // Mock role_id lookup
apps/api/test/unit/policies.spec.ts:399:      supabase.client.from.mockReturnValue({
apps/api/test/unit/policies.spec.ts:400:        select: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:401:        eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:402:        single: jest.fn().mockResolvedValue({ data: { id: 'role-buyer' }, error: null }),
apps/api/test/unit/policies.spec.ts:405:      // Mock policy checks - first succeeds, second fails
apps/api/test/unit/policies.spec.ts:407:        .mockReturnValueOnce({
apps/api/test/unit/policies.spec.ts:408:          select: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:409:          eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:410:          single: jest.fn().mockResolvedValue({ data: { policy_id: 'policy-1' }, error: null }),
apps/api/test/unit/policies.spec.ts:412:        .mockReturnValueOnce({
apps/api/test/unit/policies.spec.ts:413:          select: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:414:          eq: jest.fn().mockReturnThis(),
apps/api/test/unit/policies.spec.ts:415:          single: jest.fn().mockResolvedValue({ data: null, error: { code: 'PGRST116' } }),
apps/api/test/openapi-contract.spec.ts:18:    const moduleFixture: TestingModule = await Test.createTestingModule({
apps/api/test/openapi-contract.spec.ts:22:    app = moduleFixture.createNestApplication();
apps/api/test/tax.service.spec.ts:8:import { TaxJarStubAdapter } from '../../../src/tax/adapters/taxjar.stub';
apps/api/test/tax.service.spec.ts:9:import { AvalaraStubAdapter } from '../../../src/tax/adapters/avalara.stub';
apps/api/test/tax.service.spec.ts:48:      expect(result.provider).toBe('taxjar-stub');
apps/api/test/tax.service.spec.ts:137:      expect(result.provider).toBe('avalara-stub');
apps/api/test/tax.service.spec.ts:207:        expect(result.provider).toBe('avalara-stub');
apps/api/test/tax.service.spec.ts:233:      expect(result.provider).toBe('avalara-stub');
apps/api/test/tax.service.spec.ts:298:      expect(result.provider).toBe('avalara-stub');
